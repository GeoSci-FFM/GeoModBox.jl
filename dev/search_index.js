var documenterSearchIndex = {"docs":
[{"location":"man/DiffMain/#Energy-Conservation-Equation","page":"General","title":"Energy Conservation Equation","text":"","category":"section"},{"location":"man/DiffMain/","page":"General","title":"General","text":"The conservation of energy is a fundamental physical principle, stating that energy cannot be created or destroyed, only transformed. In geodynamical modeling, this is commonly expressed in terms of temperature, which is transported through conductive and convective processes. Assuming radioactive heat sources only, the general energy equation is defined as:","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"beginequation\nleft(fracpartial Epartial t + v_jfracpartialEpartialx_jright) + fracpartial q_ipartial x_i = rho H\nendequation","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"where energy is defined as E = c_p rho T. Here  c_p is the specific heat capacity [J/kg/K], rho is the density [kg/m³], T is temperature [K], partialpartial t is the time derivative, t is time [s], v_j is the velocity [m/s] in direction j, q_i is the heat flux [W/m²] in direction i, partialpartial x_i is a directional derivative in i, H is the internal heat production per unit mass [W/kg]. Repeated indices imply summation.","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"The heat flux q_i is described by Fourier’s law:","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"beginequation\nq_i = - k fracpartialTpartialx_i\nendequation","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"where k is the thermal conductivity [W/m/K]. The flux is directed opposite to the temperature gradient and represents the amount of heat passing through a unit surface per unit time.","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"Substituting Fourier’s law into the energy equation yields the temperature conservation equation in Eulerian form:","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"beginequation\nrho c_p left(fracpartial Tpartial t + v_jfracpartialTpartialx_jright) = -fracpartial q_ipartial x_i + rho H\nendequation","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"This equation captures temperature changes due to conduction (right-hand side) and advection (left-hand side). For simplicity and assuming a spatially constant internal heat production, these processes can be split using an operator splitting technique, solving the advection and conduction steps sequentially.If the internally heat production does vary one needs to consider a slightly improved advection scheme by integrating the source terms.","category":"page"},{"location":"man/DiffMain/#Heat-Diffusion-Equation","page":"General","title":"Heat Diffusion Equation","text":"","category":"section"},{"location":"man/DiffMain/","page":"General","title":"General","text":"GeoModBox.jl provides several finite difference (FD) schemes to solve the diffusive component of the time-dependent or steady-state temperature equation (with optional radioactive heating) in both 1-D and 2-D. Available methods include:","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"Forward Euler  \nBackward Euler  \nCrank–Nicolson  \nAlternating Direction Implicit (ADI)","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"See the documentation for the 1-D and 2-D solvers for detailed descriptions of each method.","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"At present, only Dirichlet and Neumann boundary conditions are supported. Most implementations assume constant thermal properties, with exceptions in some 1-D and 2-D solvers. See the HeatEquation source directory for implementation details.","category":"page"},{"location":"man/DiffMain/#Examples","page":"General","title":"Examples","text":"","category":"section"},{"location":"man/DiffMain/","page":"General","title":"General","text":"1-D oceanic geotherm  \n1-D continental geotherm  \nComparison of FD schemes on a Gaussian anomaly  \n2-D resolution test with Gaussian anomaly  \n2-D Poisson equation resolution test","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"For explanations, see the examples documentation and the full example directory.","category":"page"},{"location":"man/DiffMain/#Exercises","page":"General","title":"Exercises","text":"","category":"section"},{"location":"man/DiffMain/","page":"General","title":"General","text":"1-D forward Euler  \n1-D backward Euler  \n2-D Poisson equation  \n2-D transient plume heating  \n2-D transient sill heating","category":"page"},{"location":"man/DiffMain/#Heat-Advection-Equation","page":"General","title":"Heat Advection Equation","text":"","category":"section"},{"location":"man/DiffMain/","page":"General","title":"General","text":"To solve the advective component of the temperature equation, GeoModBox.jl offers several schemes:","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"Upwind scheme  \nStaggered leapfrog scheme  \nSemi-Lagrangian scheme  \nPassive tracers/markers","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"See the advection documentation and source code for method-specific details. Tracer code resides in src/Tracers, while other schemes are in src/AdvectionEquation.","category":"page"},{"location":"man/DiffMain/#Examples-2","page":"General","title":"Examples","text":"","category":"section"},{"location":"man/DiffMain/","page":"General","title":"General","text":"2-D advection with constant velocity field  \nResolution test of 2-D advection","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"See the examples documentation for further details.","category":"page"},{"location":"man/DiffMain/#Exercises-2","page":"General","title":"Exercises","text":"","category":"section"},{"location":"man/DiffMain/","page":"General","title":"General","text":"1-D Gaussian or block anomaly advection  \n2-D coupled advection-diffusion","category":"page"},{"location":"man/MomentumTwoD/#Stokes-Equation-(2D)","page":"2D","title":"Stokes Equation (2D)","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"The Stokes equation in two dimensions is defined as:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\n0 = -fracpartialPpartialx_i + fracpartialtau_ijpartialx_j + rho g_i \nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"where P is the total pressure [Pa], rho is the density [kg/m³], g_i is the gravitational acceleration [m/s²], fracpartialpartial x_i is the spatial derivative in the x_i-direction, and tau_ij is the deviatoric stress tensor [Pa], defined as:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\ntau_ij = 2eta dotvarepsilon_ij \nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"where eta is the dynamic viscosity [Pa·s], and dotvarepsilon_ij is the strain-rate tensor [1/s], given by:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\ndotvarepsilon_ij = frac12 left( fracpartialv_ipartialx_j + fracpartialv_jpartialx_i right)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"where v_i is the velocity [m/s] in the i-th direction.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"The Stokes equation provides two equations for three unknowns: v_x, v_y, and P. To solve for the third unknown, one additional equation is required — the mass conservation equation.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"The conservation of mass (assuming an incompressible medium) is defined as:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\ntextdivleft(vecv right) = left(fracpartialv_ipartialx_i+fracpartialv_jpartialx_jright) = 0\nendequation","category":"page"},{"location":"man/MomentumTwoD/#Discretization","page":"2D","title":"Discretization","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"The conservation equations of momentum and mass are solved in two dimensions (x and y) using a staggered finite difference grid, where the horizontal (cyan dashes) and vertical (orange dashes) velocities are defined between the regular grid points (vertices), and the pressure (red circles) within finite difference cells (centroids), as shown in Figure 1.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"A staggered grid enables conservation of stress between adjacent grid points and requires careful placement of the associated variables.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"(Image: MomentumGrid)","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Figure 1. Staggered finite difference grid for the momentum equation.   Discretization of the conservation equations of momentum and mass. The horizontal and vertical velocities require ghost nodes at the North, South, East, and West boundaries, respectively.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"","category":"page"},{"location":"man/MomentumTwoD/#Constant-Viscosity","page":"2D","title":"Constant Viscosity","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Let's first assume a special case of the Stokes equation, a constant viscosity, which simplifies equation (1) to:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\n0 = -fracpartialPpartialx_i + 2etafracpartial^2v_ipartialx_i^2 + etaleft(fracpartial^2v_ipartialx_j^2+fracpartial^2v_jpartialx_i^2right) + rho g_i \nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"By applying equation (4) and neglecting horizontal gravitational acceleration, equation (5) simplifies to the following component-wise forms:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"x-component ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\n-fracpartialPpartialx + etafracpartial^2v_xpartialx^2 + etafracpartial^2v_xpartialy^2 = 0 \nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"y-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\n-fracpartialPpartialy + etafracpartial^2v_ypartialy^2 + etafracpartial^2v_ypartialx^2 = - rho g_y \nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"To discretize these equations, we define a numerical stencil indicating the grid points involved in the finite difference approximation. Each stencil is centered on the point (ij), where i and j denote indices in the horizontal and vertical directions, respectively. The central point corresponds to the equation's location in the global linear system.","category":"page"},{"location":"man/MomentumTwoD/#Stencil","page":"2D","title":"Stencil","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"The numerical stencils for the momentum equations under constant viscosity are shown in Figure 2. These stencils illustrate the neighboring grid points required to evaluate each component using a finite difference scheme.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"(Image: StencilConstEta)","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Figure 2. Numerical stencils for constant viscosity. a) x-component; b) y-component.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"By applying finite difference approximations to the partial derivatives, equations (6) and (7) become:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"x-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n -fracP_ij-P_i-1jDeltax +   etafracv_x(i-1j)-2v_x(ij)+v_x(i+1j)Deltax^2 +    etafracv_x(ij-1)-2v_x(ij)+v_x(ij+1)Deltay^2 = 0\nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Rearranging and grouping terms, we obtain:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n P_CP_ij + P_WP_i-1j +   Sv_x(ij-1) +  Wv_x(i-1j) +   Cv_x(ij) +   E v_x(i+1j) + N v_x(ij+1) = 0 \nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"where the coefficients are defined as:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nbeginsplit\nP_C  = -frac1Deltax  \nP_W  = frac1Deltax \nS  = fracetaDeltay^2 \nW  = fracetaDeltax^2 \nC  = -2etaleft(frac1Deltax^2+frac1Deltay^2right) \nE  = fracetaDeltax^2 \nN  = fracetaDeltay^2 \nendsplit\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"y-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n -fracP_ij-P_ij-1Deltay +   etafracv_y(ij-1)-2v_y(ij)+v_x(ij+1)Deltay^2 +   etafracv_y(i-1j)-2v_y(ij)+v_y(i+1j)Deltax^2 =   -fracrho_ij+rho_i+1j2 g_y\nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Rearranging and grouping terms, we obtain:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n P_SP_ij-1 + P_CP_ij +   Sv_y(ij-1) + Wv_y(i-1j) +   Cv_y(ij) +   E v_y(i+1j) + N v_y(ij+1) =   -fracrho_ij+rho_i+1j2 g_y \nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"with coefficients defined as:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nbeginsplit\nP_S  = frac1Deltay  \nP_C  = -frac1Deltay \nS  = fracetaDeltay^2 \nW  = fracetaDeltax^2 \nC  = -2etaleft(frac1Deltax^2+frac1Deltay^2right) \nE  = fracetaDeltax^2 \nN  = fracetaDeltay^2 \nendsplit\nendequation","category":"page"},{"location":"man/MomentumTwoD/#Boundary-Conditions","page":"2D","title":"Boundary Conditions","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"The most commonly applied boundary conditions for the momentum equation are combinations of Dirichlet and Neumann velocity boundary conditions. These are typically referred to as free slip and no slip boundary conditions.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"","category":"page"},{"location":"man/MomentumTwoD/#Free-slip","page":"2D","title":"Free slip","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Free slip boundary conditions allow fluid motion along the boundary while enforcing zero shear stress and no flow across the boundary. For the lateral boundaries (East, West), this translates to:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nbeginsplit\nv_x = 0 \nfracpartialv_ypartialx=0\nendsplit\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"For the horizontal boundaries (North, South), the conditions are:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nbeginsplit\nv_y = 0 \nfracpartialv_xpartialy=0\nendsplit\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"When solving the momentum equation using a direct method, the system coefficients near the domain boundaries must be modified to account for these conditions. This involves specifying velocity values at ghost nodes and, if applicable, updating the right-hand side of the equations.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"x-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"For the free slip condition, the horizontal velocity v_x at the ghost nodes along the South and North boundaries is defined as:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"South","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nv_x(iGS) = v_x(i1)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"North","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nv_x(iGN) = v_x(incy)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"At the lateral boundaries (East, West), the horizontal velocity is set to zero.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"y-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"The vertical velocity v_y at the ghost nodes for the West and East boundaries is defined as:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"West","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nv_y(GWj) = v_y(1j)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"East","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nv_y(GEj) = v_y(ncxj)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Along the North and South boundaries, v_y is set to zero.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Using equations (16) – (19), the discretized system of equations is updated accordingly. For free slip boundaries, the right-hand side remains unchanged, but the coefficients are modified.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"x-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"South","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n P_WP_i-1j+P_CP_ij+   Wv_x(i-1j)+   Cv_x(ij)+   Ev_x(i+1j)+Nv_x(ij+1) = 0\nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"with ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationC = -frac2etaDeltax^2-fracetaDeltay^2endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"North","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n P_WP_i-1j+P_CP_ij+   Sv_x(ij-1)+ Wv_x(i-1j)+   Cv_x(ij)+   Ev_x(i+1j) = 0\nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"with ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationC = -frac2etaDeltax^2-fracetaDeltay^2endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"On the lateral boundaries (East, West), the central coefficient is set to:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nC = 1\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"and all other coefficients are set to zero.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"y-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"West","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n P_SP_ij-1+P_CP_ij+   Sv_y(ij-1)+   Cv_y(ij)+   Ev_y(i+1j)+ Nv_y(ij+1) =   -fracrho_ij+rho_i+1j2 g_y\nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"with ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationC = -fracetaDeltax^2-frac2etaDeltay^2endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"East","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n P_SP_ij-1+P_CP_ij+   Sv_y(ij-1)+ Wv_y(i-1j)+   Cv_y(ij)+   Nv_y(ij+1) =   -fracrho_ij+rho_i+1j2 g_y\nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"with ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationC = -fracetaDeltax^2-frac2etaDeltay^2endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"On the North and South boundaries, the central coefficient is:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nC = 1\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"and all other coefficients are zero.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"","category":"page"},{"location":"man/MomentumTwoD/#No-slip","page":"2D","title":"No slip","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"No slip boundary conditions enforce zero velocity along the boundary, effectively \"fixing\" the fluid to the boundary. That is, for all boundaries (East, West, South, North), the velocity components satisfy:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nbeginsplit\nv_x = 0 \nv_y = 0\nendsplit\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"x-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"For the horizontal velocity v_x, values at the ghost nodes adjacent to the South and North boundaries are defined as:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"South","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nv_x(iGS) = 2V_BCS - v_x(i1)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"North","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nv_x(iGN) = 2V_BCN - v_x(incy)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"where V_BCS and V_BCN are the prescribed boundary velocities (typically zero for no slip).","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"At the lateral boundaries (East, West), the velocity v_x is simply set to zero, as in the free slip case.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"y-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"For the vertical velocity v_y, the ghost nodes adjacent to the West and East boundaries are defined as:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"West","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nv_y(GWj) = 2V_BCW - v_y(1j)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"East","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nv_y(GEj) = 2V_BCE - v_y(ncxj)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"where V_BCW and V_BCE are the prescribed boundary velocities (again typically zero).","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Along the North and South boundaries, v_y = 0 directly, consistent with the free slip implementation.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Using equations (31) – (34), the system coefficients and the right-hand side of the discretized equations are modified accordingly.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"x-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"South","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n P_WP_i-1j+P_CP_ij+   Wv_x(i-1j)+   Cv_x(ij)+   Ev_x(i+1j)+Nv_x(ij+1) =   -2fracetaDeltay^2V_BCS\nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"with ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationC = -frac2etaDeltax^2-frac3etaDeltay^2endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"North","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n P_WP_i-1j+P_CP_ij+   Sv_x(ij-1)+Wv_x(i-1j)+   Cv_x(ij)+   Ev_x(i+1j) =   -2fracetaDeltay^2V_BCN\nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"with ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationC = -frac2etaDeltax^2-frac3etaDeltay^2endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"On the lateral boundaries (East, West), set:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nC = 1\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"with all other coefficients and the right-hand side equal to zero.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"y-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"West","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n P_SP_ij-1+P_CP_ij+   Sv_y(ij-1)+   Cv_y(ij)+   Ev_y(i+1j)+Nv_y(ij+1) =   -fracrho_ij + rho_i+1j2 g_y - 2fracetaDeltax^2V_BCW\nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"with ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationC = -frac3etaDeltax^2-frac2etaDeltay^2endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"East","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n P_SP_ij-1+P_CP_ij+   Sv_y(ij-1)+Wv_y(i-1j)+   Cv_y(ij)+   Nv_y(ij+1) =   -fracrho_ij + rho_i+1j2 g_y - 2fracetaDeltax^2V_BCW\nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"with ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationC = -frac3etaDeltax^2-frac2etaDeltay^2endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"On the horizontal boundaries (North, South), set:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nC = 1\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"and all other coefficients and the right-hand side to zero.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"For implementation details, please refer to the source code.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"","category":"page"},{"location":"man/MomentumTwoD/#Variable-Viscosity","page":"2D","title":"Variable Viscosity","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"In the case of variable viscosity, the momentum equation is written in terms of the unknowns as follows:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"x-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\n-fracpartialPpartialx + fracpartialpartialxleft(2eta_cfracpartialv_xpartialxright)+fracpartialpartialyleft( eta_vleft(fracpartialv_xpartialy + fracpartialv_ypartialxright)right) = 0\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"y-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\n-fracpartialPpartialy + fracpartialpartialyleft(2eta_cfracpartialv_ypartialyright)+fracpartialpartialxleft( eta_vleft(fracpartialv_ypartialx + fracpartialv_xpartialyright)right) = -fracrho_ij+rho_i+1j2g_y\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"where eta_c denotes the viscosity defined at the centroids, and eta_v denotes the viscosity defined at the vertices.","category":"page"},{"location":"man/MomentumTwoD/#Stencil-2","page":"2D","title":"Stencil","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"The stencils for the momentum equation assuming variable viscosity illustrate the grid points (parameters) required to solve the equations for each velocity component using a finite difference discretization (Figure 3).","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"(Image: Stencil_vary_eta)","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Figure 3. Numerical stencils for variable viscosity. a) x-component; b) y-component.  ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Note: In the following equations, the indices (ij) of each variable left(v_x v_y P eta_c eta_vright) refer to the central point of the respective stencil, as depicted in Figure 3. ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Using finite difference approximations, the momentum equation is expressed as:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"x-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\n-fracP_ij-P_i-1jDeltax+fractau_xx(ij) -tau_xx(i-1j)Deltax + fractau_xy(ij+1)-tau_xy(ij)Deltay = 0\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"or, explicitly in terms of partial derivatives:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n -fracP_ij-P_i-1jDeltax+  frac2eta_c(ij)fracpartialv_xpartialxvert_ij -2eta_c(i-1j)fracpartialv_xpartialxvert_i-1jDeltax +   fraceta_v(ij+1)left(fracpartialv_xpartialyvert_ij+1+fracpartialv_ypartialxvert_ij+1right)-eta_v(ij)left(fracpartialv_xpartialyvert_ij+fracpartialv_ypartialxvert_ijright)Deltay = 0\nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"and in terms of the discrete velocity unknowns:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n -fracP_ij-P_i-1jDeltax+   frac2eta_c(ij)Deltaxleft(fracv_x(i+1j)-v_x(ij)Deltaxright) -   frac2eta_c(i-1j)Deltaxleft(fracv_x(ij)-v_x(i-1j)Deltaxright)+   fraceta_v(ij+1)Deltayleft(fracv_x(ij+1)-v_x(ij)Deltay + fracv_y(ij+1)-v_y(i-1j+1)Deltaxright) -    fraceta_v(ij)Deltayleft(fracv_x(ij)-v_x(ij-1)Deltay + fracv_y(ij)-v_y(i-1j)Deltaxright) = 0\nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Reorganizing terms yields:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n P_WP_i-1j+P_CP_ij +   Sv_x(ij-1)+SWv_y(i-1j)+SEv_y(ij)+Wv_x(i-1j)+   Cv_x(ij) +   Ev_x(i+1j) + NWv_y(i-1j+1) + NEv_y(ij+1) + Nv_x(ij+1) =   0 \nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"with coefficients defined as:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbeginsplit\nP_W  = frac1Deltax \nP_C  = -frac1Deltax \nS  = fraceta_v(ij)Deltay^2\nSW  = fraceta_v(ij)DeltaxDeltay\nSE  = -fraceta_v(ij)DeltaxDeltay\nW  = frac2eta_c(i-1j)Deltax^2\nC  = -frac2Deltax^2left(eta_c(ij)+eta_c(i-1j)right)-frac1Deltay^2left(eta_v(ij+1) + eta_v(ij) right) \nE  = frac2eta_c(ij)Deltax^2\nNW  = -fraceta_v(ij+1)DeltaxDeltay\nNE  = fraceta_v(ij+1)DeltaxDeltay\nN  = fraceta_v(ij+1)Deltay^2\nendsplitendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"y-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\n-fracP_ij-P_ij-1Deltay+fractau_yy(ij) - tau_yy(ij-1)Deltay + fractau_yx(i+1j)-tau_yx(ij)Deltax = -fracrho_ij+rho_i+1j2 g_y\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"or, expanded:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n -fracP_ij-P_ij-1Deltay+   frac2eta_c(ij)fracpartialv_ypartialyvert_ij -2eta_c(ij-1)fracpartialv_ypartialyvert_ij-1Deltay +   fraceta_v(i+1j)left(fracpartialv_ypartialxvert_i+1j+fracpartialv_xpartialyvert_i+1jright)-eta_v(ij)left(fracpartialv_ypartialxvert_ij+fracpartialv_xpartialyvert_ijright)Deltax =   -fracrho_ij+rho_i+1j2 g_y\nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"which becomes in discrete form:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n -fracP_ij-P_ij-1Deltay+   frac2eta_c(ij)Deltayleft(fracv_y(ij+1)-v_y(ij)Deltayright) -   frac2eta_c(ij-1)Deltayleft(fracv_y(ij)-v_y(ij-1)Deltayright)+   fraceta_v(i+1j)Deltaxleft(fracv_y(i+1j)-v_y(ij)Deltax + fracv_x(i+1j)-v_x(i+1j-1)Deltayright) -   fraceta_v(ij)Deltaxleft(fracv_y(ij)-v_y(i-1j)Deltax + fracv_x(ij)-v_x(ij-1)Deltayright) =   -fracrho_ij+rho_i+1j2 g_y\nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Reorganized:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n P_CP_ij+P_SP_ij-1 +   Sv_y(ij-1)+SWv_x(ij-1)+SEv_x(i+1j-1)+Wv_y(i-1j)+   Cv_y(ij) +   Ev_y(i+1j) + NWv_x(ij) + NEv_x(i+1j) + Nv_y(ij+1) =   -fracrho_ij+rho_i+1j2 g_y \nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"with coefficients:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbeginsplit\nP_S  = frac1Deltay \nP_C  = -frac1Deltay \nS  = frac2eta_c(ij-1)Deltay^2\nSW  = fraceta_v(ij)DeltaxDeltay\nSE  = -fraceta_v(i+1j)DeltaxDeltay\nW  = fraceta_v(ij)Deltax^2\nC  = -frac2Deltay^2left(eta_c(ij)+eta_c(ij-1)right)-frac1Deltax^2left(eta_v(i+1j) + eta_v(ij) right) \nE  = fraceta_v(i+1j)Deltax^2\nNW  = -fraceta_v(ij)DeltaxDeltay\nNE  = fraceta_v(i+1j)DeltaxDeltay\nN  = frac2eta_c(ij)Deltay^2\nendsplitendequation","category":"page"},{"location":"man/MomentumTwoD/#Boundary-Conditions-2","page":"2D","title":"Boundary Conditions","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"The velocities for the ghost nodes used to define the various velocity boundary conditions are the same as described for the constant viscosity case.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"","category":"page"},{"location":"man/MomentumTwoD/#Free-Slip","page":"2D","title":"Free Slip","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Using equations (16)–(19), the coefficients of the equations adjacent to the corresponding boundaries are modified accordingly. Note that the right-hand side does not change for free slip boundary conditions.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"x-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"South","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n P_WP_i-1j+P_CP_ij +  SWv_y(i-1j)+SEv_y(ij)+Wv_x(i-1j)+  Cv_x(ij)+  Ev_x(i+1j)+NWv_y(i-1j+1)+NEv_y(ij+1)+Nv_x(ij+1) = 0\nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"with ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationC = -frac2Deltax^2 left( eta_c(ij) + eta_c(i-1j) right) - fraceta_v(ij+1)Deltay^2endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"North","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n P_WP_i-1j+P_CP_ij+  Sv_x(ij-1)+SWv_y(i-1j)+SEv_y(ij)+Wv_x(i-1j)+  Cv_x(ij)+   Ev_x(i+1j)+NWv_y(i-1j+1)+NEv_y(ij+1) = 0\nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"with ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationC = -frac2Deltax^2left(eta_c(ij)+eta_c(i-1j)right)-fraceta_v(ij)Deltay^2endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Along the lateral boundaries (East, West), the central coefficient is set to:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nC = 1\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"and all other coefficients are set to zero.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"y-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"West ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n P_CP_ij+P_SP_ij-1 +   Sv_y(ij-1) + SWv_x(ij-1) + SEv_x(i+1j-1) +   Cv_y(ij) +   Ev_y(i+1j) + NWv_x(ij) + NEv_x(i+1j) + Nv_y(ij+1) =   -fracrho_ij+rho_i+1j2 g_y \nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"with ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationC = -frac2Deltay^2left(eta_c(ij)+eta_c(ij-1)right)-fraceta_v(i+1j)Deltax^2endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"East ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n P_CP_ij + P_SP_ij-1 +   Sv_y(ij-1) + SWv_x(ij-1) + SEv_x(i+1j-1) + Wv_y(i-1j) +   Cv_y(ij) +   NWv_x(ij) + NEv_x(i+1j) + Nv_y(ij+1) =   -fracrho_ij+rho_i+1j2 g_y \nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"with ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationC = -frac2Deltay^2left(eta_c(ij)+eta_c(ij-1)right)-fraceta_v(ij)Deltax^2endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Along the horizontal boundaries (North, South), the central coefficient is set to:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nC = 1\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"and all other coefficients are set to zero.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"No Slip","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Using equations (31)–(34), the coefficients of the equations adjacent to the corresponding boundaries and the right-hand side change as follows.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"x-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"South","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n P_WP_i-1j+P_CP_ij+   SWv_y(i-1j)+SEv_y(ij)+Wv_x(i-1j)+   Cv_x(ij)+   Ev_x(i+1j)+NWv_y(i-1j+1)+NEv_y(ij+1)+Nv_x(ij+1) =   -2fraceta_v(ij)Deltay^2V_BCS\nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"with ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationC = -frac2Deltax^2left(eta_c(ij)+eta_c(i-1j)right)-fraceta_v(ij+1)Deltay^2-frac2eta_v(ij)Deltay^2endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"North ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n P_WP_i-1j+P_CP_ij+   Sv_x(ij-1)+SWv_y(i-1j)+SEv_y(ij)+Wv_x(i-1j)+   Cv_x(ij)+   Ev_x(i+1j)+NWv_y(i-1j+1)+NEv_y(ij+1) =   -2fraceta_v(ij+1)Deltay^2V_BCN\nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"with ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationC = -frac2Deltax^2left(eta_c(ij)+eta_c(i-1j)right)-frac2eta_v(ij+1)Deltay^2-fraceta_v(ij)Deltay^2endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Along the lateral boundaries (East, West), the central coefficient is set to:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nC = 1\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"and all other coefficients are set to zero.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"y-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"West ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n P_CP_ij + P_SP_ij-1 +   Sv_y(ij-1) + SWv_x(ij-1) + SEv_x(i+1j-1) +   Cv_y(ij) +   Ev_y(i+1j) + NWv_x(ij) + NEv_x(i+1j) + Nv_y(ij+1) =   -fracrho_ij+rho_i+1j2 g_y - 2fraceta_v(ij)Deltax^2V_BCW \nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"with ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationC = -frac2Deltay^2left(eta_c(ij)+eta_c(ij-1)right)-fraceta_v(i+1j)Deltax^2-2fraceta_v(ij)Deltax^2endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"East","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n P_CP_ij + P_SP_ij-1 +   Sv_y(ij-1) + SWv_x(ij-1) + SEv_x(i+1j-1) + Wv_y(i-1j) +   Cv_y(ij) +   NWv_x(ij) + NEv_x(i+1j) + Nv_y(ij+1) =   -fracrho_ij+rho_i+1j2 g_y -2fraceta_v(i+1j)Deltax^2V_BCE \nendgather*endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"with ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationC = -frac2Deltay^2left(eta_c(ij)+eta_c(ij-1)right)-frac2eta_v(i+1j)Deltax^2-fraceta_v(ij)Deltax^2endequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Along the horizontal boundaries (North, South), the central coefficient is set to:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nC = 1\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"and all other coefficients are set to zero.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"For more details on the implementation, please refer to the source code.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"","category":"page"},{"location":"man/MomentumTwoD/#Continuum-Equation","page":"2D","title":"Continuum Equation","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"The continuum equation provides a third equation that helps to solve for the third unknown, P.","category":"page"},{"location":"man/MomentumTwoD/#Stencil-3","page":"2D","title":"Stencil","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"The corresponding numerical stencil includes only the horizontal and vertical velocity components (Figure 4).","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"(Image: StencilContinuum)","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Figure 4. Numerical stencil for the continuum equation. ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Using the finite difference operators, equation (3) is defined as:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nfracv_x(i+1j)-v_x(ij)Deltax + fracv_y(ij+1)-v_y(ij)Deltay = 0\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nC_xv_x(ij) + E_xv_x(i+1j) + C_yv_y(ij) + N_yv_y(ij+1) = 0\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"with ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nbeginsplit\n-C_x = E_x = frac1Deltax \n-C_y = N_y = frac1Deltay\nendsplit\nendequation","category":"page"},{"location":"man/MomentumTwoD/#Solution","page":"2D","title":"Solution","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"To solve the linear system, the coefficient matrix boldK must be assembled by collecting all coefficients associated with the discretized equations. Additionally, the right-hand side vector vecrhs must be constructed, typically based on boundary and body forces (e.g., gravity). This setup is required, at minimum, for a direct solution.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Construction of the coefficient matrix boldK requires assigning a unique index to each unknown variable at every relevant grid point, ensuring a one-to-one correspondence between equations and unknowns. The indexing proceeds by:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Enumerating all equations for the x-component of momentum (unknown v_x),\nFollowed by the y-component of momentum (unknown v_y),\nAnd finally the mass conservation equations (unknown P).","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"The numbering for each equation is then defined as: ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"x-compnent (v_x) ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nii_x = 1 textrm-- left(nv_x cdot nc_yright)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"y-component (v_y)","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nii_y = left(nv_x cdot nc_y + 1 right) textrm-- left(nv_x cdot nc_y + nc_x cdot nv_yright)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"conituum equation (P)","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nii_p = left(nv_x cdot nc_y + nc_x cdot nv_y + 1right) textrm-- left(nv_x cdot nc_y + nc_x cdot nv_y + nc_x cdot nc_yright)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"where nc_i and nv_i are the numbers of centroids and vertices in the i-th direction, respectively. ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Each row (ii) of the matrix boldK corresponds to one discretized equation. The nonzero entries within a row appear at columns i_k, each representing a neighboring variable involved in the stencil (see Figures 2–4). These column indices are computed relative to the row’s associated central index i_c.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Constant Viscosity","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"x-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbeginsplit\ni_S  = ii_x - nv_x \ni_W  = ii_x - 1 \ni_C  = ii_x \ni_E  = ii_x + 1 \ni_N  = ii_x + nv_x \nendsplitendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"y-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbeginsplit\ni_S  = ii_y - nc_x \ni_W  = ii_y - 1 \ni_C  = ii_y \ni_E  = ii_y + 1 \ni_N  = ii_y + nc_x \nendsplitendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Variable Viscosity","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"x-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbeginsplit\ni_S  = ii_x - nv_x \ni_SW  = ii_y - 1 \ni_SE  = ii_y \ni_W  = ii_x - 1 \ni_C  = ii_x \ni_E  = ii_x + 1 \ni_NW  = ii_y + nc_x \ni_NE  = ii_y + nc_x + 1 \ni_N  = ii_x + nv_x \nendsplitendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"y-component","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbeginsplit\ni_S  = ii_y - nc_x \ni_SW  = ii_x - nv_x \ni_SE  = ii_x - nv_x + 1 \ni_W  = ii_y - 1 \ni_C  = ii_y \ni_E  = ii_y + 1 \ni_NW  = ii_x \ni_NE  = ii_x + 1 \ni_N  = ii_y + nc_x \nendsplitendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"The coefficients for the conservation of mass remain the same independent of the state of the viscosity. ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"continuum (P)","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbeginsplit\ni_S  = ii_y \ni_W  = ii_x \ni_C  = ii_p \ni_E  = ii_x + 1 \ni_N  = ii_y + nc_x \nendsplitendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"This results in a coefficient matrix boldKii_ji_k in the form of: ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"(Image: CoefficientMatrix)","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Figure 5. Coefficient matrix, constant viscosity. Non-zero entries of a coefficient matrix for a resolution of nc_x=nc_y=10 and a constant viscosity. Highlighted are the areas for the different equations: v_x - x-component of the momentum equation, v_y - y-component of the momentum equation, P - continuum equation. ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"(Image: CoefficientMatrix_vary)","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Figure 6. Coefficient matrix, variable viscosity. Non-zero entries of a coefficient matrix for a resolution of nc_x=nc_y=10 and a variable viscosity. Highlighted are the areas for the different equations: v_x - x-component of the momentum equation, v_y - y-component of the momentum equation, P - continuum equation. ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"The right-hand side vector vecrhs is given by the boundary and initial conditions (see equations (14) - (44)). ","category":"page"},{"location":"man/MomentumTwoD/#Direct","page":"2D","title":"Direct","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Using a direct solution method, one needs to do a right division of the coefficient matrix by the right-hand side to obtain the solution vector:","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\nboldK backslash vecrhs = vecx\nendequation","category":"page"},{"location":"man/MomentumTwoD/#Defect-Correction","page":"2D","title":"Defect Correction","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"The defect correction method is particularly effective when solving non-linear systems. First, one needs to calculate the residual for each equation, where the unknowns are given by an initial guess (usually all equal to zero and the boundary conditions): ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Residual calculation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbeginsplit\nR_x  = fracpartialtau_xxpartialx + fracpartialtau_xypartialy - fracpartialPpartialx \nR_y  = fracpartialtau_yypartialy + fracpartialtau_yxpartialx - fracpartialPpartialy + rho g_y \nR_p  = fracpartialv_xpartialx + fracpartialv_ypartialy\nendsplitendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"and in form of the finite difference operators: ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbeginsplit\nR_x  = fractau_xx(ij)-tau_xx(i-1j)Deltax + fractau_xy(ij+1)-tau_xy(ij)Deltay - fracP_ij-P_i-1jDeltax \nR_y  = fractau_yy(ij)-tau_yy(ij-1)Deltay + fractau_yx(i+1j)-tau_yx(ij)Deltax - fracP_ij-P_ij-1Deltay + fracrho_ij+rho_i+1j2 g_y \nR_p  = fracv_x(i+1j)-v_x(ij)Deltax + fracv_y(ij+1)-v_y(ij)Deltay\nendsplitendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"If the velocity nodes are not located directly on the boundary, the corresponding ghost node values should be computed using equations (16)–(19) for free slip and equations (31)–(34) for no slip conditions. The stresses are either calculated via the viscosity at the vertices or the centroids. Similar to the direct method, the residuals R_x R_y textrm and  R_p are stored in a vector R with the numbering of each equation as shown in equations (83) - (87). The coefficient matrix boldK is the same as described before. ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"For more details on the defect correction method for the Stokes equation see the 1-D documentation.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"The correction vector delta is obtained by solving the following linear system: ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequation\ndelta=- boldK backslash R\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"The vector delta has a length equal to the total number of unknowns, i.e., left(nv_x cdot nc_y + nc_x cdot nv_y + nc_x cdot nc_yright), corresponding to v_x, v_y, and P across the domain.","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Finally one needs to update the initial guess by the correction term: ","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"beginequationbeginsplit\nv_x  = v_xi + deltav_x \nv_y  = v_yi + deltav_y \nP  = P_i + deltaP\nendsplitendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"where the indices of the vector delta correspond to the indices of the unknowns left(v_x v_y Pright) as shown in equations (83) - (87).","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"Note: To update the array of the unknowns v_x v_y P, one needs to assign the elements of the one-dimensional vector delta to the two-dimensional array following the numbering shown in equations (83) - (87).","category":"page"},{"location":"man/MomentumTwoD/","page":"2D","title":"2D","text":"For more information on how both methods are implemented see the examples.","category":"page"},{"location":"man/DiffTwoD/#Temperature-Equation-(2D)","page":"2D","title":"Temperature Equation (2D)","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"In two spatial dimensions (x and y), the conductive part of the temperature equation, assuming only radiogenic heat production, is given by:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nrho c_p fracpartial Tpartial t = -fracpartial q_xpartial x -fracpartial q_ypartial y + rho H \nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"where  rho is the density [kg/m³], c_p is the specific heat capacity [J/(kg·K)], T is the temperature [K], t is time [s], q_x and q_y are the heat flux components in the x and y directions [W/m²], and H is the volumetric heat production rate per unit mass [W/kg].","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"By applying Fourier’s law and allowing for spatially variable thermal conductivity k, the equation becomes:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nrho c_p fracpartial Tpartial t = fracpartialpartial x k fracpartial Tpartial x + fracpartialpartial y k fracpartial Tpartial y + rho H\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"If thermal parameters are assumed constant, this simplifies to:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nfracpartial Tpartial t = kappa left(fracpartial^2 Tpartial x^2 + fracpartial^2 Tpartial y^2right) + fracQrho c_p\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"where  kappa = frackrho c_p is the thermal diffusivity [m²/s] and Q = rho H is the volumetric heat production rate [W/m³].","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"For an explicit finite difference discretization, the numerical stability criterion (heat diffusion condition) is given by:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nDeltat  frac12 kappa left(frac1Deltax^2+frac1Deltay^2right)\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"where Delta x and Delta y denote the spatial grid spacing in the x and y directions, respectively. This condition must be satisfied to ensure numerical stability of the explicit scheme.","category":"page"},{"location":"man/DiffTwoD/#Discretization-and-Numerical-Schemes","page":"2D","title":"Discretization and Numerical Schemes","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"To numerically solve equation (3), the spatial domain must be discretized and the relevant thermal parameters assigned to the appropriate computational nodes.","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"(Image: 2DDiffusionGrid)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Figure 1. 2D Discretization. Conservative finite difference grid for solving the 2D conductive temperature equation. Temperature values are defined at the centroids (red circles), while heat fluxes are computed at the vertices (horizontal flux: blue crosses; vertical flux: green squares). Ghost nodes (grey circles) are used to implement Dirichlet and Neumann boundary conditions.","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"A detailed implementation of various numerical schemes is provided in the example script Gaussian_Diffusion.jl. This example demonstrates the application of several methods for solving the conductive part of the 2D temperature equation:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Explicit scheme\nFully implicit scheme\nCrank–Nicolson approach\nAlternating Direction Implicit (ADI) method\nDefect correction method","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"The numerical results are compared with the analytical solution of a Gaussian temperature distribution to assess accuracy and performance.","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Each numerical scheme is briefly outlined in the following sections. For implementation details and derivations in one dimension, refer to the 1D solver documentation.","category":"page"},{"location":"man/DiffTwoD/#Explicit-Scheme:-FTCS-(Forward-Time,-Centered-Space)","page":"2D","title":"Explicit Scheme: FTCS (Forward Time, Centered Space)","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"In two dimensions, the partial derivatives in equation (3) can be approximated using an explicit FTCS (Forward Time, Centered Space) finite difference scheme:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nfracT_ij^n+1 - T_ij^n Delta t = kappa left( fracT_i-1j^n - 2T_ij^n + T_i+1j^nDeltax^2 + fracT_ij-1^n - 2T_ij^n + T_ij+1^nDeltaz^2 right) + fracQ_ij^nrho c_p \nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Here, i and j are the horizontal and vertical grid indices, respectively, n is the time step index, Delta t  is the time step size and Delta x, Delta y are the grid spacings in the horizontal and vertical directions.","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Rearranging this equation to solve for the temperature at the next time step yields:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nT_ij^n+1 = T_ij^n + aleft(T_i-1j^n - 2T_ij^n + T_i+1j^nright) + bleft(T_ij-1^n - 2T_ij^n + T_ij+1^nright) + fracQ_ij^n Deltatrho c_p \nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"where ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\na = frackappa DeltatDeltax^2 quad \nb = frackappa DeltatDeltay^2\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"For implementation details, see the source code.","category":"page"},{"location":"man/DiffTwoD/#Boundary-Conditions","page":"2D","title":"Boundary Conditions","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"To correctly impose boundary conditions, ghost nodes are used adjacent to the domain boundaries.","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Dirichlet Boundary Conditions","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Dirichlet conditions impose a fixed temperature value along the boundary. The ghost node temperatures are calculated as:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"West boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nT_GW = 2T_BCW - T_1\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"East boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nT_GE = 2T_BCE - T_ncx\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"South boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nT_GS = 2T_BCS - T_1\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"North boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nT_GN = 2T_BCN - T_ncy\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Here, T_BCW, T_BCE, T_BCS, and T_BCN are the prescribed boundary temperatures on the west, east, south, and north boundaries, respectively. The notation T_i and T_j refers to slices along rows and columns.","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Neumann Boundary Conditions","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Neumann conditions impose a prescribed gradient (e.g., heat flux) across the boundary. Ghost node temperatures are computed as:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"West boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nT_GW = T_1 - c_W Deltax\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"East boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nT_GE = T_ncx + c_E Deltax\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"South boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nT_GS = T_1 - c_S Deltay\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"North boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nT_GN = T_ncy + c_N Deltay\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"where ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nleft c_W = fracpartialTpartialx rightvert_W left c_E = fracpartialTpartialx rightvert_E \nleft c_S = fracpartialTpartialy rightvert_S\nleft c_N = fracpartialTpartialy rightvert_N\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"are the specified temperature gradients (or fluxes) at each boundary.","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Once the ghost node temperatures are defined according to the chosen boundary conditions, equation (6) can be used to update the temperature at the centroids for the next time step.","category":"page"},{"location":"man/DiffTwoD/#Implicit-Scheme:-Backward-Euler-Method","page":"2D","title":"Implicit Scheme: Backward Euler Method","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"In two dimensions, the temperature equation can be discretized using the implicit (Backward Euler) method as:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nfracT_ij^n+1-T_ij^nDelta t = \nkappa left( \n    fracT_i-1j^n+1-2T_ij^n+1+T_i+1j^n+1Delta x^2 + \n    fracT_ij-1^n+1-2T_ij^n+1+T_ij+1^n+1Delta y^2 \n    right) + \nfracQ_i^nrho c_p\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Here, n and n+1 denote the current and next time steps, Delta t is the time step size, Delta x and Delta y are the grid spacings, and i, j are the horizontal and vertical indices, respectively.","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Rewriting this equation to separate known and unknown terms results in a linear system of equations of the form:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_ij-1^n+1 - a T_i-1j^n+1 + \nleft(2a + 2b + c right) T_ij^n+1 - \na T_i+1j^n+1 - b T_ij+1^n+1 = \nc T_ij^n + fracQ_ij^nrho c_p\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"where ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\na = frackappaDeltax^2 quad\nb = frackappaDeltay^2 quad \nc = frac1Deltat\nendequation","category":"page"},{"location":"man/DiffTwoD/#Boundary-Conditions-2","page":"2D","title":"Boundary Conditions","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Boundary conditions are imposed via ghost nodes, as previously described (see equations (7)–(14)). However, to ensure a symmetric coefficient matrix in the resulting linear system, both the coefficients and the right-hand side (RHS) for centroids adjacent to the boundaries must be modified accordingly.","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Dirichlet Boundary Conditions","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"West boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_1j-1^n+1 + left(3 a + 2b + cright) T_1j^n+1 - a T_2j^n+1  - b T_1j+1^n+1 = c T_1j^n + 2 a T_BCW + fracQ_ijrho c_p\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"East boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_ncxj-1^n+1 - aT_ncx-1j^n+1 + left(3 a + 2b + cright) T_ncxj^n+1 - b T_ncxj+1^n+1 = \nc T_ncxj^n + 2 a T_BCE + fracQ_ijrho c_p\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"South boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-a T_i-11^n+1 + left(2a + 3b + cright) T_i1^n+1 - a T_i+11^n+1 - bT_i2^n+1 = \nc T_i1^n + 2 b T_BCS + fracQ_ijrho c_p\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"North boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_incy^n+1 - aT_i-1ncy^n+1 + left(2a + 3b + cright) T_incy^n+1 - a T_i+1ncy^n+1 = \nc T_incy^n + 2 b T_BCN + fracQ_ijrho c_p\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Neumann Boundary Conditions","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"West boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_1j-1^n+1 + left(a + 2b + cright) T_1j^n+1 - a T_2j^n+1  - b T_1j+1^n+1 = \nc T_1j^n - a c_W Deltax + fracQ_ijrho c_p\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"East boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_ncxj-1^n+1 - aT_ncx-1j^n+1 + left(a + 2b + cright) T_ncxj^n+1 - b T_ncxj+1^n+1 = \nc T_ncxj^n + a c_E Deltax + fracQ_ijrho c_p\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"South boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-a T_i-11^n+1 + left(2a + b + cright) T_i1^n+1 - a T_i+11^n+1 - bT_i2^n+1 = \nc T_i1^n - b c_S Deltay + fracQ_ijrho c_p\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"North boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_incy^n+1 - aT_i-1ncy^n+1 + left(2a + b + cright) T_incy^n+1 - a T_i+1ncy^n+1 = \nc T_incy^n + b c_N Deltay + fracQ_ijrho c_p\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"These boundary-specific formulations ensure symmetry in the coefficient matrix and proper enforcement of Dirichlet and Neumann conditions within the implicit time-stepping scheme.","category":"page"},{"location":"man/DiffTwoD/#Defect-Correction-Method","page":"2D","title":"Defect Correction Method","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"The defect correction method reformulates the conductive part of the temperature equation by introducing a residual term R, representing the defect (or error) in the discretized equation. This can be expressed as:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nfracpartialTpartialt - kappa left( fracpartial^2Tpartialx^2 + fracpartial^2Tpartialy^2 right) - fracQ_ij^nrho c_p = R\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Discretizing the equation in space and time using implicit finite differences yields:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nfracT_i^n+1-T_i^nDeltat - kappa \nleft( fracT_i-1j^n+1 - 2 T_ij^n+1 + T_i+1j^n+1Deltax^2 + fracT_ij-1^n+1 - 2 T_ij^n+1 + T_ij+1^n+1Deltay^2  \nright) - fracQ_ij^nrho c_p = R\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Rewriting this in a matrix-compatible form leads to:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_ij-1^n+1 - a T_i-1j^n+1 + \nleft(2a + 2b + c right) T_ij^n+1 - \na T_i+1j^n+1 - b T_ij+1^n+1 - \nc T_ij^n - fracQ_ij^nrho c_p = \nR\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"where the coefficients are defined as:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\na = frackappaDeltax^2quad  \nb = frackappaDeltay^2 textrmand quad c = frac1Deltat \nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"In this formulation, the defect R quantifies the deviation from the true solution and can be used iteratively to improve accuracy through successive correction steps.","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"For more background on the defect correction approach, see the 1-D example. For implementation details, refer to the source code.","category":"page"},{"location":"man/DiffTwoD/#Cranck-Nicolson-Approach-(CNA)","page":"2D","title":"Cranck-Nicolson Approach (CNA)","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"In 2-D, the conductive part of the heat equation (Equation 3) using the Crank–Nicolson method is written as:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n fracT_ij^n+1 - T_ij^nDelta t =  \nfrackappa2frac(T_i-1j^n+1-2T_ij^n+1+T_i+1j^n+1)+(T_i-1j^n-2T_ij^n+T_i+1j^n)Delta x^2 +  \nfrackappa2frac(T_ij-1^n+1-2T_ij^n+1+T_ij+1^n+1)+(T_ij-1^n-2T_ij^n+T_ij+1^n)Delta y^2\nendgather*endequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Rearranging into a form that separates known and unknown variables gives the linear system:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n -b T_ij-1^n+1 -aT_i-1j^n+1+left(2a + 2b + cright)T_ij^n+1 -aT_i+1j^n+1 -b T_ij+1^n+1 =  b T_ij-1^n +aT_i-1j^n-left(2a + 2b - cright)T_ij^n +aT_i+1j^n +b T_ij+1^n\nendgather*endequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"where the coefficients are defined as:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\na = frackappaDelta x^2 quad \nb = frackappaDelta y^2 quad \nc = frac1Delta t\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"As with the implicit method, the boundary-adjacent centroids require modified coefficients to accommodate boundary conditions and maintain symmetry in the coefficient matrix.","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Dirichlet Boundary Conditions","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"West boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n -b T_1j-1^n+1 +\nleft(3a + 2b + c right) T_1j^n+1 \n-a T_2j^n+1 - b T_1j+1^n+1 =  \nb T_1j-1^n - left( 3a + 2b - c right) T_1j^n + a T_2j^n + b T_1j+1^n + 4 a T_BCW\nendgather*endequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"East boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n -b T_ncxj-1^n+1 - a T_ncx-1j^n+1 +\nleft(3a + 2b + c right) T_ncxj^n+1 \n-b T_ncxj+1^n+1 =   \nb T_ncxj-1^n + a T_ncx-1j^n -\nleft( 3a + 2b - c right) T_ncxj^n + b T_ncxj+1^n + 4 a T_BCE\nendgather*endequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"South boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n -a T_i-11^n+1 +\nleft(2a + 3b + c right) T_i1^n+1 - a T_i+11^n+1 - b T_i2^n+1 =   \na T_i-11^n - left( 2a + 3b - c right) T_i1^n + a T_i+11^n + b T_i2^n + 4 b T_BCS\nendgather*endequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"North boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n -b T_incy-1^n+1 + a T_i-1ncy^n+1 + left(2a + 3b + c right) T_incy^n+1 - a T_i+1ncy^n+1 =  \nb T_incy-1^n + a T_i-1ncy^n - left( 2a + 3b - c right) T_incy^n + a T_i+1ncy^n + 4 b T_BCN\nendgather*endequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Neumann Boundary Conditions","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"West boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n -b T_1j-1^n+1 + left(a + 2b + c right) T_1j^n+1 - a T_2j^n+1 - b T_1j+1^n+1 =  \nb T_1j-1^n - left( a + 2b - c right) T_1j^n + a T_2j^n + b T_1j+1^n - 2 a c_W Deltax\nendgather*endequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"East boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n -b T_ncxj-1^n+1 - a T_ncx-1j^n+1 + left(a + 2b + c right) T_ncxj^n+1 - b T_ncxj+1^n+1 =  \nb T_ncxj-1^n + a T_ncx-1j^n - left( a + 2b - c right) T_ncxj^n + b T_ncxj+1^n + 2 a c_E Deltax\nendgather*endequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"South boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n -a T_i-11^n+1 + left(2a + b + c right) T_i1^n+1 - a T_i+11^n+1 - b T_i2^n+1 =  \na T_i-11^n - left( 2a + b - c right) T_i1^n + a T_i+11^n + b T_i2^n - 2 b c_S Deltay\nendgather*endequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"North boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequationbegingather*\n -b T_incy-1^n+1 + a T_i-1ncy^n+1 + left(2a + b + c right) T_incy^n+1 - a T_i+1ncy^n+1 =  \nb T_incy-1^n + a T_i-1ncy^n - left( 2a + b - c right) T_incy^n + a T_i+1ncy^n + 2 b c_N Deltay\nendgather*endequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"For implementation details, refer to the source code.","category":"page"},{"location":"man/DiffTwoD/#Alternating-Direction-Implicit-(ADI)","page":"2D","title":"Alternating-Direction Implicit (ADI)","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"In 2-D, the conducitve part of the heat equation (Equation 3) is discretized using the Alternating-Direction Implicit (ADI) method by splitting the time step into two fractional steps. The resulting system for each half-step is:","category":"page"},{"location":"man/DiffTwoD/#First-half-step-(implicit-in-y,-explicit-in-x):","page":"2D","title":"First half-step (implicit in y, explicit in x):","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nfracT_ij^n+12-T_ij^nDelta t2 = \nkappa \n    left( \n    fracT_i-1j^n-2T_ij^n+T_i+1j^nDelta x^2 +\n    fracT_ij-1^n+12-2T_ij^n+12+T_ij+1^n+12Delta y^2\n    right)\nendequation","category":"page"},{"location":"man/DiffTwoD/#Second-half-step-(implicit-in-x,-explicit-in-y):","page":"2D","title":"Second half-step (implicit in x, explicit in y):","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nfracT_ij^n+1-T_ij^n+12Delta t2 = \nkappa \n    left( \n    fracT_i-1j^n+1-2T_ij^n+1+T_i+1j^n+1Delta x^2 + \n    fracT_ij-1^n+12-2T_ij^n+12+T_ij+1^n+12Delta y^2\n    right)\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Each fractional step results in a tridiagonal linear system, alternating between the x- and y-directions. This decomposition improves computational efficiency while retaining the stability benefits of implicit schemes.","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"As in the Crank–Nicolson approach, the coefficients and right-hand side vectors of these systems must be adjusted appropriately based on the prescribed boundary conditions (Dirichlet or Neumann). See the CNA section for examples of boundary treatment.","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"For implementation details, refer to the source code.","category":"page"},{"location":"man/DiffTwoD/#Variable-Thermal-Parameters","page":"2D","title":"Variable Thermal Parameters","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"...tba...","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"","category":"page"},{"location":"man/DiffTwoD/#Temperature-Field-Management","page":"2D","title":"Temperature Field Management","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"In the explicit solver and the defect correction method, the extended temperature field, which includes ghost nodes, is required to compute the temperature at the new time step. The current temperature values at the centroids are assigned to this extended field to serve as the old temperature.","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"For the remaining solvers, the current temperature field at the centroids is used to construct the known right-hand side vector. The corresponding coefficient matrices are assembled to solve for the unknown temperature at the next time step.","category":"page"},{"location":"man/DiffTwoD/#Steady-State-Solution","page":"2D","title":"Steady State Solution","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Note: Variable thermal parameters are currently implemented for the 1-D time-dependent and 2-D steady-state cases. The 2-D defect correction method also supports time-dependent problems with variable parameters. These capabilities will be extended in future updates.","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"In steady state, the temperature field does not vary with time (i.e., partial Tpartial t = 0), and the heat equation simplifies to an elliptic partial differential equation, also known as the Poisson equation.","category":"page"},{"location":"man/DiffTwoD/#Poisson-Equation-(Constant-k)","page":"2D","title":"Poisson Equation (Constant k)","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"For constant thermal conductivity, the steady-state heat equation is given by:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n0 = left( \n    fracpartial^2 Tpartial x^2 + fracpartial^2 Tpartial z^2\n    right) + fracQk\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Using central finite differences to approximate the spatial derivatives, this becomes:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n0 = left( \nfracT_i-1j - 2T_ij + T_i+1jDelta x^2 + fracT_ij-1 - 2T_ij + T_ij+1Delta y^2\nright) + fracQk\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"where i and j denote the indices in the x- and y-directions, respectively.","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Rearranging the terms yields a linear system of the form:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation \nbT_ij-1 + aT_i-1j - 2(a+b)T_ij + aT_i+1j + bT_ij+1 = -fracQk\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"with","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\na = frac1Delta x^2 quad\nb = frac1Delta y^2\nendequation","category":"page"},{"location":"man/DiffTwoD/#Boundary-Conditions-3","page":"2D","title":"Boundary Conditions","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Boundary conditions are enforced using ghost nodes, requiring modifications to both the coefficient matrix and the right-hand side vector.","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Dirichlet Boundary Conditions","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"West boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nbT_1j-1 - (3a + 2b)T_1j + bT_1j+1 + aT_2j = -fracQ_ijk_ij - 2aT_BCW\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"East boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\naT_ncx-1j + bT_ncxj-1 - (3a + 2b)T_ncxj + bT_ncxj+1 = -fracQ_ijk_ij - 2aT_BCE\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"South boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\naT_i-11 - (2a + 3b)T_11 + bT_i2 + aT_i+11 = -fracQ_ijk_ij - 2bT_BCS\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"North boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\naT_i-1ncy + bT_incy-1 - (2a + 3b)T_1ncy + aT_i+1ncy = -fracQ_ijk_ij - 2bT_BCN\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Neumann Boundary Condtions","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"West boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nbT_1j-1 - (a + 2b)T_1j + bT_1j+1 + aT_2j = -fracQ_ijk_ij + ac_WDeltax\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"East boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\naT_ncx-1j + bT_ncxj-1 - (a + 2b)T_ncxj + bT_ncxj+1 = -fracQ_ijk_ij - ac_EDeltax\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"South boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\naT_i-11 - (2a + b)T_11 + bT_i2 + aT_i+11 = -fracQ_ijk_ij + bc_SDeltay\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"North boundary","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\naT_i-1ncy + bT_incy-1 - (2a + b)T_1ncy + aT_i+1ncy = -fracQ_ijk_ij - bc_NDeltay\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"For implementation details, refer to the source code.","category":"page"},{"location":"man/DiffTwoD/#Poisson-Equation-(variable-k)","page":"2D","title":"Poisson Equation (variable k)","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"For spatially varying thermal conductivity, the steady-state heat equation in 2-D is given by:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation \n0 = fracpartialpartial xleft(k_xfracpartial Tpartial xright) + \nfracpartialpartial yleft(k_yfracpartial Tpartial yright) + Q_ij \nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"To discretize this equation conservatively, a staggered finite difference scheme is used: the heat flux q_i = k_i fracpartial Tpartial i is defined between centroids, while the temperature is defined at the centroids.","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"This yields the discretized form:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation \nb k_yij T_ij-1 + a k_xij T_i-1j + c T_ij + a k_xi+1j T_i+1j + b k_yij+1 T_ij+1 + Q_ij = 0  \nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"where:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\na = frac1Deltax^2 quad\nb = frac1Deltay^2 textrmand  quad\nc = -aleft(k_xi+1j+k_xijright) - bleft(k_yij+1+k_yijright)\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"For further implementation details, see the source code.","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"","category":"page"},{"location":"man/examples/PoissonRestest/#[Poisson-Problem-(constant-k)](https://github.com/GeoSci-FFM/GeoModBox.jl/blob/main/examples/DiffusionEquation/2D/Poisson_ResTest.jl)","page":"Poisson Problem (2D)","title":"Poisson Problem (constant k)","text":"","category":"section"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"This example conducts a resolution test for a steady state, 2-D temperarture conservation equation, i.e. a Poisson equation, assuming a constant thermal conductivity k. ","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"The maximum resolution is define by n*ncx x n*ncy, where n needs to be defined in the very beginning. ","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"The temperature equation is solved for each resolution in a loop and the maximum and mean temperature is stored. In theory, the exact solution of the problem should be reached with increasing resolution. ","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"For more details on the model setup and the physics or the numerical scheme, please see the exercise or the documentation","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"Let's first define the maximum resolution. ","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"# Define the numer of differen resolutions ------------------------------ #\n# Maximum resolution is defined as nx = n*40, ny = n*20 ---\nn       =   20","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"Now, one can define the geometrical and physical constants. ","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"# Physical Parameters --------------------------------------------------- #\nP       = ( \n    L       =   4.0e3,      #   [m]\n    H       =   2.0e3,      #   [m]\n    k       =   5.6,        #   Conductivity, W/m/K\n    # Define the region of the anomaly\n    Wcave   =   200.0,      # Width [ m ]\n    Hcave   =   200.0,      # Thickness [ m ]\n    Dcave   =   1.0e3,      # Depth of center [ m ]\n    Xcave   =   2.0e3,      # x-position of center [ m ]\n    Q       =   0.3         # volumetric heat production rate [ W/m³ ]; Q = rho*H\n)\n# ----------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"Dirichlet boundary conditions are assumed along all boundaries. ","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"# Boundary conditions --------------------------------------------------- #\nBC      =   (\n    type    = (W=:Dirichlet, E=:Dirichlet, N=:Dirichlet, S=:Dirichlet),\n    val     = (W=:0.0,E=:0.0,N=:0.0,S=:0.0)\n)\n# ----------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"In the following, the parameters for the resolution test are initialized: ","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"the reziprocal resolution \nthe maximum temperature\nthe mean temperature","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"# Define statistical parameters for visualization ---\nST      =   (\n    x       =   zeros(n),       # Reziproc resolution 1/nx/ny\n    Tmax    =   zeros(n),       # Maximum temperature\n    Tmean   =   zeros(n)        # Mean temperature\n)\n# ----------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"Now, one can start the loop over the given resolutions (k).","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"# Loop over the resolutions --------------------------------------------- #\nfor k = 1:n","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"Within the loop, one needs to update the grid information. ","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"    # Numerical Parameters ---------------------------------------------- #\n    NC      = (\n        x       =   k*40,        # Gitterpunkte in x-Richtung, Spalten\n        y       =   k*20         # Gitterpunkte in y-Richtung, Zeilen    \n    )\n    println(\"Run \",k,\", ncx = \",NC.x,\", ncy = \",NC.y)\n    # Initialize grid spacing ------------------------------------------- #\n    Δ       = (\n        x       =   P.L/NC.x,\n        y       =   P.H/NC.y\n    )\n    # ------------------------------------------------------------------- #   \n    ST.x[k]     =   1 / NC.x / NC.y\n    # ------------------------------------------------------------------- #\n    # Generate the grid ------------------------------------------------- #\n    x       = (\n        c       =   LinRange(0.0 + Δ.x[1]/2.0, P.L - Δ.x[1]/2.0, NC.x),\n    )\n    y       = (\n        c       =   LinRange(-P.H + Δ.y[1]/2.0, 0.0 - Δ.y[1]/2.0, NC.y),\n    )\n    # ------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"Now, one can initialize the required fields and setup the initial conditions. For the sake of simplicity, let's assume a constant background temperature of zero. ","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"    # Initialcondition -------------------------------------------------- #\n    D       = ( \n        Q       =   zeros(NC...),\n        T       =   zeros(NC...),\n    )\n    # Heat production rate in the anomaly ---\n    for i = 1:NC.x, j = 1:NC.y\n        if x.c[i] >= (P.Xcave-P.Wcave/2.0) && x.c[i] <=(P.Xcave+P.Wcave/2.0) && \n            y.c[j] >= -P.Dcave-P.Hcave/2.0 && y.c[j] <= -P.Dcave+P.Hcave/2.0 \n            D.Q[i,j]    = P.Q\n        end\n    end\n    # ------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"To solve the Poisson equation, one needs to define the coefficient matrix, the degrees of freedom of the linear system of equations, and the right-hand side. ","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"    # Linear System of Equations ---------------------------------------- #\n    Num     =   (T=reshape(1:NC.x*NC.y, NC.x, NC.y),)\n    ndof    =   maximum(Num.T)\n    K       =   ExtendableSparseMatrix(ndof,ndof)\n    rhs     =   zeros(ndof)\n    # ------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"The linear system of equation is solve via the function Poisson2Dc!() for a constant thermal conductivity. The function updates the temperature field D.T with the solution. For each resolution, the parameters for the resolution test can be calculated. ","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"    # Solve equation ---------------------------------------------------- #\n    Poisson2Dc!(D,NC,P,BC,Δ,K,rhs,Num)\n    # ------------------------------------------------------------------- #\n    ST.Tmax[k]      =   maximum(D.T[:])\n    ST.Tmean[k]     =   mean(D.T[:])\nend","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"Following the loop over the entire given resolutions, one can linearly fit the mean and maximum temperature to determine the value for a theoretical, zero grid space, that is the exact solution of the problem.","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"# Linear fit ------------------------------------------------------------ #\ndf_max      =   DataFrame(x = ST.x, Tmax = ST.Tmax)\ndf_mean     =   DataFrame(x = ST.x, Tmean = ST.Tmean)\n# Fit linear models\nlinfitMAX   =   lm(@formula(Tmax ~ x), df_max)\nlinfitMEAN  =   lm(@formula(Tmean ~ x), df_mean)\n# Extract coefficients\n#coef1       =   coef(linfitMAX)\n#coef2       =   coef(linfitMEAN)\n# Calculate fitted values\nlinfit1     =   predict(linfitMAX)\nlinfit2     =   predict(linfitMEAN)\n# ----------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"Finally, one can plot the maximum and mean temperature over the reciprocal resolution and the linear fit. ","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"# Plot solution --------------------------------------------------------- #\n# Subplot 1 ---\np = scatter(ST.x, ST.Tmean, marker=:circle, markersize=4,label=\"\",\n        xlabel=\"1/nx/ny\",ylabel=\"⟨T⟩\",title=\"Resolution Test\",\n        xaxis=:log,\n        layout=(2,1))\nplot!(p,ST.x, linfit2, color=\"black\", label=\"\", \n            linestyle=:dash, linewidth=2)\n## Add text for fitted minimum temperature\n#annotate!(p,1e-4, 121.8, \"T_{fit,mean} = $(coef2[1])\")\n\n# subplot 2 ---\nscatter!(p,ST.x, ST.Tmax, marker=:circle, markersize=4,label=\"\",\n        xlabel=\"1/nx/ny\",ylabel=\"T_{max}\",\n        subplot=2)\nplot!(p,ST.x, linfit1, color=\"black\", label=\"\", \n            linestyle=:dash, linewidth=2,subplot=2)\n\n# Show the plot\ndisplay(p)\nsavefig(\"./examples/DiffusionEquation/2D/Results/Poisson_ResTest.png\")\n# ----------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/PoissonRestest/","page":"Poisson Problem (2D)","title":"Poisson Problem (2D)","text":"(Image: PP_rest_test)","category":"page"},{"location":"man/GESolution/#Solving-Differential-Equations","page":"General","title":"Solving Differential Equations","text":"","category":"section"},{"location":"man/GESolution/#Governing-Equations","page":"General","title":"Governing Equations","text":"","category":"section"},{"location":"man/GESolution/","page":"General","title":"General","text":"The general governing equations for solving a geodynamical problem, neglecting adiabatic effects and assuming only radioactive heat source, are the conservation equations of ","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"Momentum","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"beginequation\nrho left(fracpartialv_ipartialt + v_jfracpartialv_ipartialx_jright) = -fracpartialPpartialx_i + fractau_ijpartialx_j + rho g_i\nendequation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"where  rho is the density [kg/m³],  v_i is the velocity in the i-th direction [m/s], t is time [s], partialpartialt is the time derivative,  partialpartial x_i is a directional derivative in i,  P the total pressure [Pa],  tau_ij is the deviatoric stress tensor [Pa], and  boldsymbolg is the gravitational acceleration vector [m/s²]. ","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"Energy","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"beginequation\nrho c_p left(fracpartial Tpartial t + v_jfracpartialTpartialx_jright) = -fracpartial q_ipartial x_i + rho H\nendequation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"where  c_p is the specific heat capacity [J/kg/K], T is temperature [K], q_i is the heat flux [W/m²] in direction i, H is the internal heat production per unit mass [W/kg]. ","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"Mass","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"beginequation\nfracpartialv_ipartialx_i = 0\nendequation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"Repeated indices imply summation.","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"Ordinary and partial differential equations (ODEs and PDEs) can be solved through various approaches—occasionally analytically, but more commonly numerically due to their inherent complexity. Among numerical methods, prominent techniques include integral-based methods, such as the finite element and spectral methods, as well as the finite difference method.","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"The GeoModBox.jl framework primarily employs the finite difference method. While each numerical approach has its own strengths and limitations, the choice often depends on the user's familiarity and comfort with the method. Nonetheless, the finite difference method is relatively straightforward and pedagogically advantageous, as its discretized form closely resembles the original differential equations. Furthermore, it is computationally efficient, making it well-suited for performance-critical applications.","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"In general, the finite difference method aims to approximate differential operators using finite differences derived from a Taylor series expansion. For further details, refer to the lecture notes or see the reference below.","category":"page"},{"location":"man/GESolution/#Staggered-Finite-Difference","page":"General","title":"Staggered Finite Difference","text":"","category":"section"},{"location":"man/GESolution/","page":"General","title":"General","text":"... finite difference approximation ...","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"To solve differential equations within a given domain using the finite difference method, it is first necessary to generate a numerical grid on which finite differences can be computed. The most straightforward approach is to discretize the domain using a regular, uniform grid, where the spacing between grid points is constant and all variables are defined at the same locations. Such grids are commonly used to solve equations like the Poisson equation, the heat equation, or advective transport equations.","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"However, in many cases, certain limitations or physical constraints require a different arrangement of variable locations to ensure numerical stability and the conservation of physical properties. For instance, solving the momentum equation with variable viscosity typically requires a fully staggered grid to correctly preserve stress continuity across adjacent grid points. A similar consideration applies to the temperature equation when using variable thermal conductivity.","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"Staggered grids also offer advantages in implementing boundary conditions. For example, with Neumann thermal boundary conditions, the heat flux across a boundary can be naturally evaluated at staggered points using so-called ghost points. These ghost points can also be employed to impose Dirichlet boundary conditions. This approach helps maintain consistent accuracy and order of the finite difference scheme both at internal and boundary points. ","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"For these reasons, GeoModBox.jl adopts a staggered grid for solving the temperature equation. The complete grid structure used for the governing equations in GeoModBox.jl is illustrated below:","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"(Image: 2DGrid_total)","category":"page"},{"location":"man/GESolution/#Initial-Conditions","page":"General","title":"Initial Conditions","text":"","category":"section"},{"location":"man/GESolution/","page":"General","title":"General","text":"... tba ...","category":"page"},{"location":"man/GESolution/#Thermal-convection","page":"General","title":"Thermal convection","text":"","category":"section"},{"location":"man/GESolution/","page":"General","title":"General","text":"The equations discussed here are used to solve for pressure and velocity in two-dimensional thermal convection systems. While support for variable thermodynamic parameters—such as density ( rho ), specific heat capacity ( c_p ), and thermal conductivity ( k )—is forthcoming, simplifications are often employed to make the problem more tractable.","category":"page"},{"location":"man/GESolution/#Approximations","page":"General","title":"Approximations","text":"","category":"section"},{"location":"man/GESolution/","page":"General","title":"General","text":"A commonly used simplification in thermal convection modeling is the Boussinesq approximation. This approximation assumes that all thermodynamic properties remain constant, and adiabatic temperature effects are neglected in the temperature equation. Spatial density variations are assumed to be small and are only retained in the buoyancy term of the momentum equation. Under this framework, density becomes a function of temperature and is described using an equation of state.","category":"page"},{"location":"man/GESolution/#Equation-of-State","page":"General","title":"Equation of State","text":"","category":"section"},{"location":"man/GESolution/","page":"General","title":"General","text":"Several forms of the equation of state exist. For the current analysis, a linear approximation is used to describe density as a function of temperature:","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"beginequation\nrho = rho_0 (1-alpha T)\nendequation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"where rho_0 is the reference density [kg/m³], and alpha is the thermal expansion coefficient [1/K].","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"Substituting this relation into the buoyancy term on the right-hand side of the momentum equation and using the definition of total pressure,","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"beginequation\nP_t = P_textdyn + P_texthydr\nendequation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"where P_textdyn and P_texthydr denote the dynamic and hydrostatic pressure, respectively, along with the gradient of hydrostatic pressure,","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"beginequation\nfracpartialP_texthydrpartialy=rho_0 g\nendequation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"yields a modified form of the y-component of the dimensional momentum equation.","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"Governing equations","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"The following dimensional equations govern thermal convection under the Boussinesq approximation:","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"Momentum equation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"x-component","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"beginequation\n0 = -fracpartialP_textdynpartialx+fracpartialtau_xjpartialx_j\nendequation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"y-component","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"beginequation\n0 = -fracpartialP_textdynpartialy+fracpartialtau_yjpartialx_j - rho_0 g alpha T\nendequation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"where P_textdyn is the dynamic pressure [Pa], tau_ij is the deviatoric stress tensor [Pa], rho_0 is the reference density [kg/m³], g is the gravitational acceleration [m/s²], alpha is the thermal expansion coefficient [1/K], and T is the absolute temperature [K].","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"Temperature equation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"beginequation\nleft(fracpartialTpartialt + v_j fracpartialTpartialx_jright) = kappa fracpartial^2Tpartialx^2_i + fracQrho_0 c_p\nendequation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"where t is time [s], v_j is the velocity in the j-th direction [m/s], kappa = frackrho c_p is the thermal diffusivity [m²/s], Q is the volumetric heat production rate [W/m³], and c_p is the specific heat capacity [J/kg/K]. For implementation details, refer to the thermal convection examples.","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"Continuity equation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"beginequation\nfracpartialv_ipartialx_i = 0\nendequation","category":"page"},{"location":"man/GESolution/#Scaling","page":"General","title":"Scaling","text":"","category":"section"},{"location":"man/GESolution/","page":"General","title":"General","text":"In geodynamic modeling, it is common practice to non-dimensionalize the governing equations to generalize results across different physical scales and to enable experimental modeling (e.g., in laboratory settings). To non-dimensionalize equations (7)–(10), we introduce scaling constants and derive the associated scaling laws.","category":"page"},{"location":"man/GESolution/#Scaling-Constants","page":"General","title":"Scaling Constants","text":"","category":"section"},{"location":"man/GESolution/","page":"General","title":"General","text":"Several schemes exist for non-dimensionalization. In this case, the following set of scaling constants is used:","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"beginequationbeginsplit\nh_sc  = h  \nt_sc  = frach^2kappa \nv_sc  = frackappah \ntau_sc  = fraceta_0 kappah^2 \nT_sc  = DeltaT \nQ_sc  = fracDeltaTkappa rho_0 c_ph^2 \nendsplitendequation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"where h is the model height [m], kappa is the thermal diffusivity [m²/s], eta_0 is the reference viscosity [Pa·s], Delta T is the temperature difference between the top and bottom boundaries [K], rho_0 is the reference density [kg/m³], and c_p is the specific heat capacity [J/kg/K].","category":"page"},{"location":"man/GESolution/#Scaling-laws","page":"General","title":"Scaling laws","text":"","category":"section"},{"location":"man/GESolution/","page":"General","title":"General","text":"These constants are applied to transform dimensional quantities into their non-dimensional counterparts:","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"beginequationbeginsplit\nh  = h cdot h_sc  \nt  = t cdot t_sc \nv  = v cdot v_sc \ntau  = tau cdot tau_sc \nT  = T cdot T_sc \nQ  = Q cdot Q_sc\nendsplitendequation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"When applied, many of the constants cancel out, resulting in non-dimensional equations that structurally resemble the dimensional ones. Note: This simplification is only valid under the assumptions and approximations discussed above. Any remaining scaling terms can often be grouped into key dimensionless parameters.","category":"page"},{"location":"man/GESolution/#Rayleigh-Number","page":"General","title":"Rayleigh Number","text":"","category":"section"},{"location":"man/GESolution/","page":"General","title":"General","text":"The primary remaining dimensionless parameter is the Rayleigh number (Ra), which characterizes the convective behavior and replaces the buoyancy term in the momentum equation:","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"beginequation\nRa = fracrho_0 g alpha DeltaT h^3eta_0 kappa\nendequation","category":"page"},{"location":"man/GESolution/#Non-Dimensional-Governing-Equations","page":"General","title":"Non-Dimensional Governing Equations","text":"","category":"section"},{"location":"man/GESolution/","page":"General","title":"General","text":"Momentum equation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"x-component","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"beginequation\n-fracpartialPpartialx+fracpartialtau_xjpartialx_j = 0\nendequation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"Or in terms of velocity: ","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"beginequation\n-fracpartialPpartialx+2fracpartialpartialxetafracpartialv_xpartialx+fracpartialpartialyetaleft(fracpartialv_xpartialy+fracpartialv_ypartialxright) = 0\nendequation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"y-component","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"beginequation\n-fracpartialPpartialy+fracpartialtau_yjpartialx_j = Ra T\nendequation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"Or in terms of velocity: ","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"beginequation\n-fracpartialPpartialy+2fracpartialpartialyetafracpartialv_ypartialy +fracpartialpartialxetaleft(fracpartialv_ypartialx + fracpartialv_xpartialyright) = Ra T\nendequation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"Temperature equation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"beginequation\nleft(fracpartialTpartialt + v_j fracpartialTpartialx_jright) = fracpartial^2Tpartialx^2_i + Q\nendequation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"Continuity equation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"beginequation\nfracpartialv_xpartialx + fracpartialv_ypartialy = 0\nendequation","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"When interpreting or analyzing non-dimensional models, it is essential to keep track of the scaling constants and reference values used in the transformation.","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"Compared to the dimensional equations, the non-dimensional (scaled) forms differ only slightly in structure. As a result, the same numerical solver can be used for both dimensional and non-dimensional formulations, requiring only minimal modifications when specifying the parameters. ","category":"page"},{"location":"man/GESolution/","page":"General","title":"General","text":"For an implementation example, see the thermal convection examples.","category":"page"},{"location":"man/GESolution/#Mutable-Structures","page":"General","title":"Mutable Structures","text":"","category":"section"},{"location":"man/GESolution/","page":"General","title":"General","text":"... tba ...","category":"page"},{"location":"man/MomentumOneD/#Stokes-Equation-(1D)","page":"1D","title":"Stokes Equation (1D)","text":"","category":"section"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Before tackling the Stokes equation in two dimensions, we start with a simpler, one-dimensional problem: uniaxial Stokes flow in a horizontal channel, assuming a known horizontal pressure gradient. This setup provides a first-order approximation for flows in magma or subduction channels. The one-dimensional Stokes equation in the x-direction is expressed as:","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"x-component","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\n0 = -fracpartialPpartialx + fracpartialtau_xypartialy\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"where P is the pressure [Pa], fracpartialpartial x_i denotes the partial derivative in the i-th direction, and tau_xy is the horizontal shear stress [Pa], defined by:","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\ntau_xy = 2 eta dotvarepsilon_xy\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"with eta the viscosity [Pa·s] and dotvarepsilon_xy the shear strain-rate [1/s], given by:","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\ndotvarepsilon_xy = frac12 fracpartialv_xpartialy\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Note: For the y-component of the Stokes equation, gravitational acceleration g_y must be included.","category":"page"},{"location":"man/MomentumOneD/#Discretization","page":"1D","title":"Discretization","text":"","category":"section"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"(Image: Stokes1D_Grid)","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Figure 1. Channel flow setup and finite difference grid. Left: Sketch of uniaxial channel flow driven by either a constant velocity at the top (v_x) and/or a horizontal pressure gradient left(fracDelta PDelta x = P_1 - P_0right), representing Couette, Poiseuille, or Couette-Poiseuille flow. Right: Finite difference grid with conservative gridding—viscosity is defined at vertices, and horizontal velocity is defined between them. The open circles at the top represent ghost nodes for horizontal velocity.","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"The finite difference grid employs a conservative scheme where velocity and viscosity are defined at staggered nodes. This ensures the horizontal shear stress is conserved across adjacent grid points, with stress values defined at the vertices. Such conservative gridding is essential when viscosity varies with depth. To build intuition, we first consider the simpler case of constant viscosity before addressing depth-dependent viscosity.","category":"page"},{"location":"man/MomentumOneD/#Constant-Viscosity","page":"1D","title":"Constant Viscosity","text":"","category":"section"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"In the case of constant viscosity, a conservative gridding is not required. Equation (1) simplifies to:","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\n0 = -fracpartialPpartialx + etafracpartial^2v_xpartialy^2\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Applying a central difference approximation to the second derivative, and assuming a constant and known horizontal pressure gradient, this becomes:","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nfracpartialPpartialx = eta left( fracv_xj-1 - 2v_xj + v_xj+1Deltay^2 right)\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"which can be rewritten in a more compact form:","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nfracpartialPpartialx=av_xj-1+bv_xj+cv_xj+1 \nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"where","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"a = c = fracetaDeltay^2quad textrmand quad b = -frac2etaDeltay^2","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"This results in a linear system of equations of the form:","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nboldK cdot vecv_x = vecrhs\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"where boldK is a tridiagonal matrix, vecv_x is the vector of unknown horizontal velocites between the vertices, and vectextrhs is the known right-hand side defined by the pressure gradient and boundary velocities. ","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"For simplicity, no separate solver for the constant viscosity case is included in GeoModBox.jl. Instead, viscosity is always treated numerically as an array, even in isoviscous cases. For implementation details, refer to the source code.","category":"page"},{"location":"man/MomentumOneD/#Variable-Viscosity","page":"1D","title":"Variable Viscosity","text":"","category":"section"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"In the case of variable viscosity, Equation (1) becomes:","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\n0 = -fracpartialPpartialx + fracpartialtau_xypartialy = -fracpartialPpartialx + fracpartialpartialyleft(etafracpartialv_xpartialyright)\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"The differential operators in Equation (8) are approximated using central finite differences. The shear stress tau_xy and viscosity eta are defined at the vertices, while the velocity v_x is defined at the centroids (the midpoints between adjacent vertices in 1D).","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Using a central difference approximation for the shear stress, Equation (8) becomes:","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nfracpartialPpartialx=fractau_xyj+1-tau_xyjDeltay textrmfor j = 1nc \nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"or, in terms of the velocity:","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nfracpartialPpartialx=fraceta_j+1fracpartialv_xpartialyvert_j+1-eta_jfracpartialv_xpartialyvert_jDeltay textrmfor j = 1nc\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Approximating the velocity derivatives using central differences gives:","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nfracpartialPpartialx=fraceta_j+1fracv_xj+1-v_xjDeltay-eta_jfracv_xj-v_xj-1Deltayvert_jDeltay\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Note: The index j ranges from 1 to nc, where viscosity is defined on the vertices and velocity on the centroids.","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Rewriting the above in terms of the unknown velocities, the equation becomes:","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nfracpartialPpartialx=av_xj-1+bv_xj+cv_xj+1 \nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"where","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\na = fraceta_jDeltay^2 quad \nb = -fraceta_j+eta_j+1Deltay^2 textrmand quad \nc = fraceta_j+1Deltay^2 \nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"This again results in a linear system of equations with a tridiagonal coefficient matrix.","category":"page"},{"location":"man/MomentumOneD/#Boundary-Conditions","page":"1D","title":"Boundary Conditions","text":"","category":"section"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"To solve the equations, boundary conditions must be specified. For both Dirichlet and Neumann boundary conditions, the velocity values at the ghost nodes need to be defined. As with thermal boundary conditions, the ghost node velocities can be determined by assuming either a constant velocity at the boundary (Dirichlet) or a constant velocity gradient across the boundary (Neumann). The ghost node velocities are defined as:","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Dirichlet Boundary Conditions","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Bottom","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nV_GS = 2V_BCS - v_x1\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Top","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nV_GN = 2V_BCN - v_xnc\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Neumann Boundary Conditions","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Bottom","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nV_GS = v_x1 - c_sDeltay\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Top","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nV_GN=v_xnc + c_NDeltay\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"where ","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nc_S = fracdv_xdyvert_S textrmand c_N=fracdv_xdyvert_N \nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"are the velocity gradients across the boundary. ","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"To maintain a symmetric coefficient matrix, the coefficients at the centroids adjacent to the boundaries and the corresponding right-hand side (RHS) must be adjusted. The discretized equations at the bottom and top boundaries become:","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Dirichlet Boundary Conditions","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Bottom","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nleft(b-aright)v_x1+cv_x2 = fracpartialPpartialx - 2aV_BCS\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Top","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nav_xnc-1+left(b-cright)v_xnx = fracpartialPpartialx - 2cV_BCN\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Neumann Boundary Conditions","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Bottom","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nleft(b+aright)v_x1+cv_x2 = fracpartialPpartialx + ac_SΔy\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Top","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nav_xnc-1+left(b+cright)v_xnx = fracPx - cc_NΔy\nendequation","category":"page"},{"location":"man/MomentumOneD/#Solution","page":"1D","title":"Solution","text":"","category":"section"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"There are different ways to solve the linear system of equations. The most convenient one is a direct solution using right division of the coefficient matrix by the right-hand side.","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Direct","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nv_x = boldK  rhs\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Similar to the thermal problem, the system can also be solved using the defect correction method. This becomes especially useful when the system is non-linear, as it allows one to iteratively reduce the residual.","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Defect Correction","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"The first step is to calculate the residual of the governing equation:","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nR = -fracPx + fracτ_xyy\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"or in terms of the unknown horizontal velocity:","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nR = -fracPx + boldK cdot v_x \nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Assuming an initial guess for the horizontal velocity v_xi, the initial residual is:","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nR_i = -fracPx + boldK_i cdot v_xi\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Now assume that the initial guess can be corrected to the exact solution by adding a correction term deltav_x. With some algebra:","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\n0 = -fracPx + boldKleft(v_xi+ deltav_x right) = boldKcdot v_xi -fracPx + boldKcdot deltav_x = R_i + boldK cdot deltav_x\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Rearanging gives: ","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nR_i = -boldKcdotdeltav_x \nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"so the correction term is:","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\ndeltav_x = -boldK^-1R_i \nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Finally, the corrected solution is:","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"beginequation\nv_x^n = v_xi + deltav_x\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"If the system is linear, this gives the solution in one step. For non-linear problems, this process must be iterated until the residual becomes sufficiently small.","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"For implementation details, see the source code.","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"An example of solving the channel flow using the defect correction method is provided in the examples.","category":"page"},{"location":"man/MomentumOneD/","page":"1D","title":"1D","text":"Solving the same problem using the direct method is part of the exercises.","category":"page"},{"location":"man/examples/Overview_Convection/#Thermal-convection","page":"Thermal convection","title":"Thermal convection","text":"","category":"section"},{"location":"man/examples/Overview_Convection/","page":"Thermal convection","title":"Thermal convection","text":"Thermal mantle convection is a perfect example on how to transport heat with both diffusion (especiall in the thermal boundary layers) and advection (mainly within the interior). ","category":"page"},{"location":"man/examples/Overview_Convection/","page":"Thermal convection","title":"Thermal convection","text":"Bottom \nInternally\nMixed Heated","category":"page"},{"location":"man/examples/ContinentalGeotherm/#[Continental-Geotherm](https://github.com/GeoSci-FFM/GeoModBox.jl/blob/main/examples/DiffusionEquation/1D/ContinentalGeotherm_1D.jl)","page":"Continental Geotherm (1D)","title":"Continental Geotherm","text":"","category":"section"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"The 1-D temperature profile of a continental geotherm can be calculated by solving the conductive part of the 1-D temperature equation using variable thermal parameters with a proper conserving finite difference scheme (so far only including a radiogenic heat source). We use the 1-D solver for variable thermal parameters, since the thermal conductivity varies within each lithospheric layer. ","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"A proper conservative finite difference scheme in 1-D means that the temperature is defined on the centroids and the vertical heat flux and the thermal conductivity k on the vertices.","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"The 1-D temperature equation is given by: ","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"beginequation\nrho c_p fracpartialTpartialt = fracpartialq_ypartialy + rho H\nendequation","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"where the heat flux q_y is defined as:","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"beginequation\nleft q_ym = -k_m fracpartial Tpartial yrightvert_m textrmfor m = 1nv \nendequation","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"with rho c_p T t k H y and nv are the density [kg/m³], the specific heat capacity [J/kg/K], the temperature [K], the time [s], the thermal conductivity [W/m/K], the heat generation rate per mass [W/kg], the depth [m], and the number of vertices, respectively. ","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"For more details on how to discretize the equation using an explicit, forward Euler finite difference scheme see the documentation.","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"Let's start with the definition of the geometrical, numerical, and physical constants: ","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"# Constants --------------------------------------------------------- #\nH           =   200e3               #   Hight of the model [ m ]\nyUC         =   10e3                #   Depth of the upper crust [ m ]\nyLC         =   35e3                #   Depth of the lower crust [ m ]\n        \nnc          =   200                 #   Number of grid points\nΔy          =   H/nc                #   Grid resolution\n\n# Depth [m] ---\nyc          =   LinRange(-H + Δy/2.0,0.0 - Δy/2.0,nc)     \nyv          =   LinRange(-H,0,nc+1)\n        \nPy  =   (\n    # Mantle properties ---\n    ρM      =   3000,               #   Density [ kg/m^3 ]\n    cpM     =   1000,               #   Heat capacity [ J/kg/K ]\n    kM      =   2.3,                #   Conductivity [ W/m/K ]\n    HM      =   2.3e-12,            #   Heat generation rate [W/kg]; Q = ρ*H;2.3e-12\n        \n    # Upper crust properties ---\n    ρUC     =   2700,               #   [ kg/m^3 ]\n    kUC     =   3.0,                #   [ W/m/K ]\n    HUC     =   617e-12,            #   [ W/kg ]\n    cpUC    =   1000,\n        \n    # Lower crust properties ---\n    ρLC     =   2900,               #   [ kg/m^3 ]\n    kLC     =   2.0,                #   [ W/m/K ]\n    HLC     =   43e-12,             #   [ W/kg ]\n    cpLC    =   1000,\n)                \n# ------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"In the following, one needs to define the initial and boundary condition: ","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"Temperature at the surface and bottom.\nLinear increasing temperature profile assuming a certain adiabatic gradient and potential mantle temperature.","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"# Initial Condition ------------------------------------------------- #\nT   =   (\n    Tpot    =   1315 + 273.15,      #   Potential temperautre [ K ]\n    ΔTadi   =   0.5,                #   Adiabatic temperature gradient [ K/km ]\n    Ttop    =   273.15,             #   Surface temperature [ K ]\n    T_ex    =   zeros(nc+2,1),    \n)\nT1  =   (\n    Tbot    =   T.Tpot + T.ΔTadi*abs(H/1e3),    # Bottom temperature [ K ]\n    T       =   T.Tpot .+ abs.(yc./1e3).*T.ΔTadi,   # Initial T-profile [ K ]\n)\nT   =   merge(T,T1)\n\nTini                =   zeros(nc,1)\nTini                .=   T.T\nT.T_ex[2:end-1]     .=  T.T\n# ------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"One can choose between Dirichlet or Neumann thermal boundary conditions at the surface and bottom. ","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"# Boundary conditions ----------------------------------------------- #\nBC      =   (\n    type    = (N=:Dirichlet, S=:Dirichlet),\n    val     = (N=T.Ttop,S=T.Tbot)\n)\n# If Neumann boundary conditions are choosen, the following values result in the given heatflux for the given thermal conductivity k. \n# S      =   -0.03;          # c     =   -k/q -> 90 mW/m^2\n# N      =   -0.0033;        # c     =   -k/q -> 10 mW/m^2\n# ------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"Now, one needs to define the multiplication factor fac of the diffusion stability criterion for the explicit thermal solver. This factor controls the stability criterion. If it is larger then 1 the solver becomes instable.  ","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"# Time stability criterion ------------------------------------------ #\nfac     =   0.9                 #   Courant criterion\ntmax    =   1000                 #   Lithosphere age [ Ma ]\ntsca    =   60*60*24*365.25     #   Seconds per year\n\nage     =   tmax*1e6*tsca        #   Age in seconds    \n# ------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"Let's check that the initial and boundary conditions are properly defined by plotting the temperature profile. ","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"# Plot Initial condition -------------------------------------------- #\np = plot(T.T,yc./1e3, \n    label=\"\", \n    xlabel=\"T [ K ]\", ylabel=\"z [ km ]\", \n    title=\"Initial Temperature\",\n    xlim=(T.Ttop,T.Tbot),ylim=(-H/1e3,0))\ndisplay(p)\n# ------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"(Image: CG1D_ini)","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"Figure 1. Initial temperature profile.","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"Now one needs to define the fields for the thermal paramter and assign the corresponding values of each lithospheric layer (upper and lower crust, and lithospheric mantle) to them. Additionally, the thermal diffusivity kappa and initialize the vertical heat flux q need to be defined. ","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"# Setup fields ------------------------------------------------------ #\nPy1     =   (\n    k            =   zeros(nc+1,1),\n    ρ            =   zeros(nc,1),\n    cp           =   zeros(nc,1),\n    H            =   zeros(nc,1),\n    )\nPy  = merge(Py,Py1)\n    \n# Upper Crust ---\nPy.k[yv.>=-yUC]     .=   Py.kUC\nPy.ρ[yc.>=-yUC]     .=   Py.ρUC\nPy.cp[yc.>=-yUC]    .=   Py.cpUC\nPy.H[yc.>=-yUC]     .=   Py.HUC    \n# Lower Crust ---\nPy.k[yv.>=-yLC .&& yv.<-yUC]     .=   Py.kLC\nPy.ρ[yc.>=-yLC .&& yc.<-yUC]     .=   Py.ρLC\nPy.cp[yc.>=-yLC .&& yc.<-yUC]    .=   Py.cpLC\nPy.H[yc.>=-yLC .&& yc.<-yUC]     .=   Py.HLC   \n# Mantle ---\nPy.k[yv.<-yLC]  .=   Py.kM\nPy.ρ[yc.<-yLC]  .=   Py.ρM\nPy.cp[yc.<-yLC] .=   Py.cpM\nPy.H[yc.<-yLC]  .=   Py.HM\n\nPy2     =   (\n    # Thermal diffusivity [ m^2/s ] \n    κ       =  maximum(Py.k)/minimum(Py.ρ)/minimum(Py.cp),     \n    )\nPy  =   merge(Py,Py2)\nT2  =   (\n    q   =   zeros(nc+1,1),\n    )\nT   =   merge(T,T2)  \n# ------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"Now, one can calculate the time stability criterion. ","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"# Time stability criterion ------------------------------------------ #\nΔtexp   =   Δy^2/2/Py.κ             #   Stability criterion for explicit\nΔt      =   fac*Δtexp               #   total time step\n\nnit     =   ceil(Int64,age/Δt)      #   Number of iterations    \n\ntime    =   zeros(1,nit)            #   Time array\n# ------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"Now all required parameter and constants are defined to solve the 1-D temperature equation for each time step in a for loop. ","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"The temperature conservation equation is solved via the function ForwardEuler1D!(), which updates the temperature profile T.T for each time step using the extended temperautre field T.T_ex, which include the ghost nodes. The temperature profile is plotted for a certain time.  ","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"# Time Loop --------------------------------------------------------- #\ncount   =   1\nfor i = 1:nit\n    if i > 1\n        time[i]     =   time[i-1] + Δt\n    elseif time[i] > age\n        Δt          =   age - time[i-1]\n        time[i]     =   time[i-1] + Δt\n    end\n    ForwardEuler1D!(T,Py,Δt,Δy,nc,BC)\n    if i == nit || abs(time[i]/1e6/tsca - count*100.0) < Δt/1e6/tsca        \n        println(string(\"i = \",i,\", time = \", time[i]/1e6/tsca))                    \n        p = plot!(T.T.-T.Ttop,yc./1e3, \n            label=string(\"t = \",ceil(time[i]/1e6/tsca),\"[Ma]\"), \n            xlabel=\"T [°C]\", ylabel=\"z [m]\", \n            title=\"Continental Geotherm\",\n            xlim=(0,T.Tbot-T.Ttop),ylim=(-H/1e3,0))\n        display(p)\n        count = count + 1\n    end\nend\n# ------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"(Image: CG1D_evolve)","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"Figure 2. Evolution of the temperature profile with depth in 5 Ma steps.","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"For the final time step, a depth profile for the vertical heat flux is calculated. Therefore, one needs to update the temperature at the ghost nodes to calculate the heat flux at the boundary. ","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"# Calculate heaf flow ----------------------------------------------- #\n# South ---\nT.T_ex[1]   =   (BC.type.S==:Dirichlet) * (2 * BC.val.S - T.T_ex[2]) + \n                (BC.type.S==:Neumann) * (T.T_ex[2] - BC.val.S*Δy)\n# North ---\nT.T_ex[end] =   (BC.type.N==:Dirichlet) * (2 * BC.val.N - T.T_ex[nc+1]) +\n                (BC.type.N==:Neumann) * (T.T_ex[nc+1] + BC.val.N*Δy)\nif size(Py.k,1)==1\n    for j=1:nc+1\n        T.q[j]  =   -Py.k * \n            (T.T_ex[j+1] - T.T_ex[j])/Δy\n    end    \nelse\n    for j=1:nc+1\n        T.q[j]  =   -Py.k[j] * \n            (T.T_ex[j+1] - T.T_ex[j])/Δy\n    end\nend\n# ------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"Finally, one can caluclate the temperature profile for an oceanic geotherm using the analytical expression of an infinite half-space cooling model for a certain age. The analytical solution is plotted in the final figure, together with the final numerical temperature profile and the heat flux profile. ","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"# Plot profile if requested ----------------------------------------- #\nq = plot(T.T.-T.Ttop,yc./1e3, \n        label=string(\"t = \",ceil(maximum(time)/1e6/tsca),\"[Ma]\"), \n        xlabel=\"T [°C]\", ylabel=\"z [m]\",\n        title=\"Continental Geotherm\",\n        xlim=(0,T.Tbot-T.Ttop),ylim=(-H/1e3,0),\n        layout=(1,3),subplot=1)    \nq = plot!(T.q.*1e3,yv./1e3, \n        label=\"\", \n        xlabel=\"q [ mW ]\", ylabel=\"z [m]\", \n        title=\"Heat Flux\",\n        ylim=(-H/1e3,0),\n        subplot=2) \nq = plot!(Py.k,yv./1e3,label=\"k [W/m/K]\",\n        xlabel=\"k,ρ,cp,Q\", ylabel=\"z [km]\",\n        title=\"Thermal parameters\",\n        subplot=3)       \nq = plot!(Py.cp./1e3,yc./1e3,label=\"cp [kJ/kg/K]\",\n        subplot=3)\nq = plot!(Py.ρ,yc./1e3,label=\"ρ [kg/m³]\",                \n        subplot=3)\nq = plot!(Py.H.*(Py.ρ./1e3),yc./1e3,label=\"Q [mW/m³]\",\n        subplot=3)\ndisplay(q)\n# Save figures ---\nsavefig(q,\"./examples/DiffusionEquation/1D/Results/ContinentalGeotherm_1D.png\")\nsavefig(p,\"./examples/DiffusionEquation/1D/Results/ContinentalGeotherm_1D_evolve.png\")\n# ======================================================================= #","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"(Image: CG1D_final)","category":"page"},{"location":"man/examples/ContinentalGeotherm/","page":"Continental Geotherm (1D)","title":"Continental Geotherm (1D)","text":"Figure 3. Final temperature, heat flux, and thermal parameter depth profiles.","category":"page"},{"location":"man/AdvTwoD/#Advection-Equation-(2D)","page":"2D","title":"Advection Equation (2D)","text":"","category":"section"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"In two dimensions (x and y), the advection equation for the temperature conservation equation, for example, is given as follows ","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"beginequation\nfracpartialTpartialt = -v_x left(fracpartialTpartialxright) - -v_y left(fracpartialTpartialyright)\nendequation","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"where T is the temperature [K], t is the time [s], and v_x and v_y are the velocities in the x- and y-direction, respectively. ","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"The finite difference approximations of the different discretization schemes do not vary significantly from the 1D case. For more theoretical background, please refer to the 1D documentation.","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"The following sections provide a brief overview of the available 2D discretization schemes.","category":"page"},{"location":"man/AdvTwoD/#Discretization-Schemes","page":"2D","title":"Discretization Schemes","text":"","category":"section"},{"location":"man/AdvTwoD/#Upwind","page":"2D","title":"Upwind","text":"","category":"section"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"In 2D, the advection equation can be discretized using the upwind scheme as:","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"beginequation\nfracT_ij^n+1-T_ij^nDelta t = -v_xij\nbegincases\nfracT_ij^n-T_i-1j^nDelta x textif  v_xij gt 0  fracT_i+1j^n-T_ij^nDelta x textif  v_xij lt 0\nendcases \n-v_yij\nbegincases\nfracT_ij^n-T_ij-1^nDelta y textif  v_yij  0  \nfracT_ij+1^n-T_ij^nDelta y textif  v_yij0\nendcases\nendequation","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"where T is the temperature, v the velocity, n is the current time step, Delta t the time step increment, and i, j are the spatial indices in the x- and y-directions, respectively. For implementation details, see the source code.","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"This method is stable and effective but introduces numerical diffusion if the Courant condition is not satisfied. It is also only first-order accurate in space.","category":"page"},{"location":"man/AdvTwoD/#Staggered-Leapfrog","page":"2D","title":"Staggered Leapfrog","text":"","category":"section"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"The 2D staggered leapfrog discretization is given by:","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"beginequation\nfracT_ij^n+1 - T_ij^n-12Delta t = \n-v_xijfracT_i+1j^n - T_i-1j^n2Delta x \n-v_yijfracT_ij+1^n - T_ij-1^n2Delta y\nendequation","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"For implementation details, see the source code.","category":"page"},{"location":"man/AdvTwoD/#Semi-lagragian","page":"2D","title":"Semi-lagragian","text":"","category":"section"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"In 2D, velocity can vary significantly in space and time. Therefore, a modified version of the 1D semi-Lagrangian scheme is used, employing an iterative midpoint method to determine the origin of the characteristic trajectory. The following steps are performed:","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"1. Mid-point (half time step) origin  Estimate the intermediate position X at time t_n+12 using the velocity at t_n+1 at point (ij).","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"2. Mid-point velocity  Compute the velocity at X using temporal averaging:","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"beginequation\nvleft(t_n+12(ij)right) = fracvleft(t_n+1(ij)right) + vleft(t_n(ij)right)2\nendequation","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"The velocity at X can be interpolated linearly from the surrounding grid points.","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"3. Actual origin point ","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"Calculate the actual origin X(t) for the position x(t_n+1(ij)) using:","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"beginequation\nX(t) = xleft(t+1(ij)right) - Deltatvleft(t_n+12Xright)\nendequation","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"This step is performed iteratively (e.g., five iterations or until convergence).","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"4. Update temperature  Use cubic interpolation to determine the temperature at the origin X(t), which defines the temperature at the final position x(t_n+1(ij)).","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"This scheme assumes no heat sources during advection. It is free from numerical diffusion but introduces interpolation-based inaccuracies. For implementation details, see the source code.   ","category":"page"},{"location":"man/AdvTwoD/#Passive-tracers","page":"2D","title":"Passive tracers","text":"","category":"section"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"Tracers are advected in 2D using fourth-oder Runge-Kutta method: ","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"beginequationbeginsplit\nx_p^n+1  = x_p^n + frac16k_1 + frac13k_2 + frac13k_3 + frac16k_4 \ny_p^n+1  = y_p^n + frac16m_1 + frac13m_2 + frac13m_3 + frac16m_4\nendsplit\nendequation","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"where:","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"beginequation\nbeginsplit\nk_1  = Deltat cdot v_x(t^n(x_p^ny_p^n)) \nm_1  = Deltat cdot v_y(t^n(x_p^ny_p^n))  newline\nk_2  = Deltat cdot v_x(t^n+Deltat2(x_p^n+k_12y_p^n+m_12)) \nm_2  = Deltat cdot v_y(t^n+Deltat2(x_p^n+k_12y_p^n+m_12))  newline\nk_3  = Deltat cdot v_x(t^n+Deltat2(x_p^n+k_22y_p^n+m_22)) \nm_3  = Deltat cdot v_y(t^n+Deltat2(x_p^n+k_22y_p^n+m_22))  newline\nk_4  = Deltat cdot v_x(t^n+Deltat(x_p^n+k_3y_p^n+m_3)) \nm_4  = Deltat cdot v_y(t^n+Deltat(y_p^n+k_3y_p^n+m_3)) \nendsplit\nendequation","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"Per default, the tracers are advected by the velocity of the staggered velocity vertices. However, if required the velocity on the centroids or a combination of both is possible. The tracer velocity is calculated using a bilinear interpolation scheme. ","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"The tracers can also be advected parallel by defining the maximum number of threads in the VScode julia extension settings (\"julia.NumThreads\"). ","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"Tracers can carry different properties such as absolute temperature or phase identification number (ID). For temperature, interpolation between centroids and tracer positions is required. Note that this implementation currently does not support fully coupled temperature-momentum simulations.","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"Alternatively, phase IDs (linked to properties like constant density or viscosity) can be advected to simulate compositional heterogeneity. Property interpolation is performed at vertices or centroids depending on the required context (e.g., viscosity for the momentum equations).","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"Caution is required when interpolating properties between the grid and tracers, especially when those properties influence the governing equations (e.g., viscosity in momentum conservation).","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"Currently, no new tracers are inserted where needed, limiting the applicability of this approach for coupled temperature-momentum models.","category":"page"},{"location":"man/AdvTwoD/","page":"2D","title":"2D","text":"For implementation details, please refer to the source code.","category":"page"},{"location":"man/examples/GaussianDiffusion1D/#[Gaussian-Diffusion-(1D)](https://github.com/GeoSci-FFM/GeoModBox.jl/blob/main/examples/DiffusionEquation/1D/Heat_1D_discretization.jl)","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"","category":"section"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"This examples shows the advantages and disadvantages for different finite difference discretization scheme solving the 1-D temperature conservation equation assuming constant thermal parameters and neglecting adiabatic pressure effects (i.e., a simple diffusion problem).","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"The following discretization scheme are used: ","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"Forward Euler\nBackward Euler\nCrank-Nicolson\nDefect Correction","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"As initial condition, a Gaussian temperature distribution with a certain width and amplitude is assumed along a 1-D profile. The transient behavior of this temperature distribution can be described analytically. Thus, one can calculate the accuracy for each time step of each finite difference scheme using this analytical solution. The temperature distribution and error in percent are shown for each time step in a small animation. ","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"For more details regarding the model setup and physics or details on the different numerical discretization schemes, please see the exercises or the documentation.","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"First, one needs to define the geometrical and physical constants. ","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"# Physical Parameters --------------------------------------------------- #\nL           =   100.0               # Length [ m ]\nTrock       =   300.0               # Background temperature [ C ]\nTmagma      =   1200.0              # Dike temperature [ C ]\nW           =   5.0                 # Dike width [m]\nκ           =   1.0e-6              # Diffusivity [ m²/s ]\n# ----------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"Now, the numerical constants.","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"# Numerical Parameters -------------------------------------------------- #\nnc          =   100                 # Number of cenroids\nΔx          =   L/nc                # Grid spacing\nxc          =   Δx/2:Δx:(L-Δx/2)    # Coordinates\n# Iterations ---\nniter       =   10  \nϵ           =   1.0e-10       \n# ----------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"All numerical schemes are solved consecutively for their individual temperature profile within the same time loop. Thus, the time step needs to satisfy the diffusion time stability criterion for the Backward Euler (explicit) numerical scheme. One can control the absolut time step via the multiplication factor fac.","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"# Time Parameters ------------------------------------------------------- #\nday         =   3600.0*24.0         # Seconds per day\ntmax        =   2.0*365.25*day      # Maximum time [ s ]\ntime        =   0.0                 # Initilalize time\n# Explicit time stability criterion ---\nΔtexp       =   Δx^2/κ/2.0\n# Absolut time step ---\nfac         =   0.9                 # Factorisation\nΔt          =   fac*Δtexp           # Absolut time step\n# Number of time steps ---\nnt          =   ceil(Int,tmax/Δt)\n# ----------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"As initial condition, a Gaussian temperature distribution along the x-direction is defined, assuming a certain width sigma and its peak at the middle of the profile. The initial temperature distribution is assigned to an individual temperature field for each numerical sceheme. The temperature is not stored for each time step, but overwritten within the time loop. ","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"# Initial condition ----------------------------------------------------- #\nT           =   (ini = zeros(nc), ana = zeros(nc))\n# Gaussian temperature distribution ---------\nσ           =   5\nxp          =   L/2.0\n@. T.ini    =   Trock + (Tmagma-Trock)*exp(-((xc-xp)/σ)^2)\n# Setting up field memroy ---\nexplicit    =   (T = zeros(nc), T_ex = zeros(nc+2), ε = zeros(nc))\nimplicit    =   (T = zeros(nc), rhs = zeros(nc), ε = zeros(nc))\ndc          =   (T = zeros(nc), T0 = zeros(nc), T_ex = zeros(nc+2), \n                    ∂T2∂x2 = zeros(nc), R = zeros(nc), ε = zeros(nc))\ncna         =   (T = zeros(nc), ε = zeros(nc))\n# Assign initial temperature ---\nexplicit.T              .=  T.ini\nexplicit.T_ex[2:end-1]  .=  explicit.T\nimplicit.T              .=  T.ini\ndc.T0                   .=  T.ini\ncna.T                   .=  T.ini\n# Analytical solution ---\n@. T.ana    =   Trock + (Tmagma-Trock)/(sqrt(1+4*time*κ/σ^2))*\n                        exp(-(xc-xp)^2/(σ^2 + 4*time*κ))\n# ----------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"Now, the thermal boundary conditions.","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"# Boundary conditions --------------------------------------------------- #\nBC          =   (\n                    type = (W=:Dirichlet, E=:Dirichlet),\n                    #type = (W=:Neumann, E=:Neumann),\n                    val = (W=:300.0,E=:300.0)\n)\n# ----------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"For the implicit numerical scheme, one also needs to define the coefficient matrices and the degrees of freedom ndof of the linear system of equations. ","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"# Assemble Coefficient Matrix ------------------------------------------- #\nndof        =   length(T.ini)\nK           =   ExtendableSparseMatrix(ndof,ndof)    \nK1          =   ExtendableSparseMatrix(ndof,ndof)    \nK2          =   ExtendableSparseMatrix(ndof,ndof)    \n# ----------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"To visualize the transient behavior, the temperature profile and the error are stored as a gif. ","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"Note: If one wants to plot the solution for certain time steps the parameter save_fig needs to be set to 0. This setting does not result in the generation of a gif file and the single plots are not saved! ","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"# Animationssettings ---------------------------------------------------- #\npath        =   string(\"./examples/DiffusionEquation/1D/Results/\")\nanim        =   Plots.Animation(path, String[] )\nfilename    =   string(\"1D_comparison\")\nsave_fig    =   1\n# ----------------------------------------------------------------------- #\n\nLet's plot the initial condition first. \n\n# Plot initial condition ------------------------------------------------ #\np = plot(xc, explicit.T, label=\"explicit\", \n        xlabel=\"x [m]\", ylabel=\"T [°C]\", \n        title=\"Temperature after $(round(time / day, digits=1)) days\n        Δt = $(round(Δt / Δtexp, digits=2))*Δt_{crit}\",\n        xlim=(0,L),ylim=(0, Tmagma),layout=(1,2))\nplot!(p,xc, implicit.T,label=\"implicit\",subplot=1)\nplot!(p,xc, dc.T0,label=\"def correction\",subplot=1)\nplot!(p,xc, cna.T,label=\"cna\",subplot=1)\nplot!(p,xc, T.ana, linestyle=:dash, label=\"analytical\",subplot=1)\nplot!(p,xc, explicit.ε, xlabel=\"x [m]\", ylabel=\"ε\",\n        title=\"Error\",\n        label=\"ε_exp\",xlim=(0,L),ylim=(0,2.0),\n        subplot=2)        \nplot!(p,xc, implicit.ε, label=\"ε_imp\",subplot=2)      \nplot!(p,xc, dc.ε, label=\"ε_dc\",subplot=2)  \nplot!(p,xc, cna.ε, label=\"ε_cna\",subplot=2)  \n\nif save_fig == 1\n    Plots.frame(anim)\nelse\n    display(p)\nend\n# ----------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"(Image: Diff1Dini)","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"Figure 1. Initial temperature distribution.","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"Now, all parameter have been defined to solve the 1-D temperature conservation equation for each time step using a for loop. Within the time loop, the equation is solved seperately using each of the above mentioned numerical discretization schemes. ","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"If the temperature field is not explicitly updated within this script after the solver, the temperature is updated within the solver already. ","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"# Time loop ------------------------------------------------------------- #\nfor n=1:nt\n    println(\"Zeitschritt: \",n,\", Time: $(round(time/day, digits=1)) [d]\")\n    # Explicit, Forward Euler ------------------------------------------- #\n    ForwardEuler1Dc!( explicit, κ, Δx, Δt, nc, BC )\n    # Implicit, Backward Euler ------------------------------------------ #\n    BackwardEuler1Dc!( implicit, κ, Δx, Δt, nc, BC, K, implicit.rhs )\n    # Defection correction method --------------------------------------- #\n    for iter = 1:niter\n        # Residual iteration\n        ComputeResiduals1Dc!( dc, κ, Δx, Δt, BC )\n        @printf(\"||R|| = %1.4e\\n\", norm(dc.R)/length(dc.R))            \n        norm(dc.R)/length(dc.R) < ϵ ? break : nothing\n        # Assemble linear system\n        AssembleMatrix1Dc!( κ, Δx, Δt, nc, BC, K )\n        # Solve for temperature correction: Cholesky factorisation\n        Kc = cholesky(K.cscmatrix)\n        # Solve for temperature correction: Back substitutions\n        δT = -(Kc\\dc.R[:])          \n        # Update temperature            \n        dc.T .= dc.T .+ δT            \n    end        \n    # Crank-Nicolson method --------------------------------------------- #\n    CNA1Dc!( cna, κ, Δx, Δt, nc, BC, K1, K2 )\n    # Update temperature ------------------------------------------------ #\n    dc.T0           .=  dc.T\n    # Update time ------------------------------------------------------- #\n    time    =   time + Δt\n    # Analytical Solution ----------------------------------------------- #\n    @. T.ana    =   Trock + (Tmagma-Trock)/(sqrt(1+4*time*κ/σ^2))*\n                        exp(-(xc-xp)^2/(σ^2 + 4*time*κ))\n    # Error ------------------------------------------------------------- #\n    @. explicit.ε   =   abs((T.ana-explicit.T)/T.ana)*100\n    @. implicit.ε   =   abs((T.ana-implicit.T)/T.ana)*100\n    @. dc.ε         =   abs((T.ana-dc.T0)/T.ana)*100\n    @. cna.ε        =   abs((T.ana-cna.T)/T.ana)*100\n    # Plot solution ----------------------------------------------------- #\n    if n == 1 || n % 5 == 0 || n == nt\n        # Subplot 1 ---\n        p = plot(xc, explicit.T, label=\"explicit\",\n                xlim=(0,L),ylim=(0,1300),\n                xlabel=\"x [m]\",ylabel=\"T [°C]\",\n                title=\"Temperature after $(round(time / day, digits=1)) days\n        Δt = $(round(Δt / Δtexp, digits=2))*Δt_{crit}\",\n                layout=(1,2))\n        plot!(p, xc, implicit.T,linestyle=:dash, label=\"implicit\",subplot=1)\n        plot!(p, xc, dc.T,linestyle=:dash, label=\"def correction\",subplot=1)\n        plot!(p, xc, cna.T,linestyle=:dash, label=\"cna\",subplot=1)\n        plot!(p, xc, T.ana, linestyle=:dash, label=\"analytical\",subplot=1)    \n        # Subplot 2 ---\n        plot!(p,xc, explicit.ε, label=\"ε_exp\",\n            xlim=(0,L),ylim=(0,2.0),\n            xlabel=\"x [m]\",ylabel=\"ε [%]\",\n            title=\"Error\",\n            subplot=2)\n        plot!(p, xc, implicit.ε,linestyle=:dash, label=\"ε_imp\",subplot=2)\n        plot!(p, xc, dc.ε,linestyle=:dot, label=\"ε_dc\",subplot=2)\n        plot!(p, xc, cna.ε,linestyle=:dash, label=\"ε_cna\",subplot=2)                \n        # Display the plots ---    \n        if save_fig == 1\n            Plots.frame(anim)\n        else\n            display(p)\n        end\n    end\nend","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"(Image: Diff_1D_evolve)","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"Figure 2. Temperature evolution and corresponding error for each numerical scheme. exp - Forward Euler, imp - Backward Euler, dc - Defect correction, cna - Crank-Nicolson. ","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"Finally, the plots are stored in an animation and the individual png files for the certain time steps are removed. ","category":"page"},{"location":"man/examples/GaussianDiffusion1D/","page":"Gaussian Diffusion (1D)","title":"Gaussian Diffusion (1D)","text":"# Speicher Animation ---------------------------------------------------- #\nif save_fig == 1\n    # Write the frames to a GIF file\n    Plots.gif(anim, string( path, filename, \".gif\" ), fps = 15)\nelse\n    display(plot(p))\nend\nforeach(rm, filter(startswith(string(path,\"00\")), readdir(path,join=true)))\n# ----------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/ViscousInclusion/#[Viscous-Inclusion](https://github.com/GeoSci-FFM/GeoModBox.jl/blob/main/examples/StokesEquation/2D/ViscousInclusion.jl)","page":"Viscous Inclusion","title":"Viscous Inclusion","text":"","category":"section"},{"location":"man/examples/ViscousInclusion/","page":"Viscous Inclusion","title":"Viscous Inclusion","text":"...tba...","category":"page"},{"location":"man/Ini/#Initial-Conditions","page":"Initial Conditions","title":"Initial Conditions","text":"","category":"section"},{"location":"man/Ini/","page":"Initial Conditions","title":"Initial Conditions","text":"The GeoModBox.jl contains several routines or structures to define certain parameters or to setup a certain initial anomaly, either for properties defined on their correspondig grid (i.e., temperature, velocity, or phase) or for tracers. Within the [examples] and the [exercise] one can choose different initial temperature and velocity conditions.  ","category":"page"},{"location":"man/Ini/#Mutable-Structures","page":"Initial Conditions","title":"Mutable Structures","text":"","category":"section"},{"location":"man/Ini/","page":"Initial Conditions","title":"Initial Conditions","text":"Implementing the scaled version of the thermal convection into the GeoModBox.jl showed that immutable NamedTuplesare numerically unfavourable for the scripts. Some initially defined parameters, like the model height, need to be modified in order to scale them. ","category":"page"},{"location":"man/Ini/","page":"Initial Conditions","title":"Initial Conditions","text":"Geometry()","category":"page"},{"location":"man/Ini/","page":"Initial Conditions","title":"Initial Conditions","text":"Physics()","category":"page"},{"location":"man/Ini/","page":"Initial Conditions","title":"Initial Conditions","text":"GridSpacing()","category":"page"},{"location":"man/Ini/","page":"Initial Conditions","title":"Initial Conditions","text":"DataFields()","category":"page"},{"location":"man/Ini/","page":"Initial Conditions","title":"Initial Conditions","text":"TimeParameter","category":"page"},{"location":"man/Ini/#Initial-Temperature","page":"Initial Conditions","title":"Initial Temperature","text":"","category":"section"},{"location":"man/Ini/","page":"Initial Conditions","title":"Initial Conditions","text":"IniTemperature!() ","category":"page"},{"location":"man/Ini/#Initial-Velocity","page":"Initial Conditions","title":"Initial Velocity","text":"","category":"section"},{"location":"man/Ini/","page":"Initial Conditions","title":"Initial Conditions","text":"IniVelocity!() ","category":"page"},{"location":"man/Ini/#Initial-Phase","page":"Initial Conditions","title":"Initial Phase","text":"","category":"section"},{"location":"man/Ini/","page":"Initial Conditions","title":"Initial Conditions","text":"IniPhase!()","category":"page"},{"location":"man/Ini/#Initialize-Tracers","page":"Initial Conditions","title":"Initialize Tracers","text":"","category":"section"},{"location":"man/examples/FallingBlockBenchmark/#[Falling-Block-Benchmar](https://github.com/GeoSci-FFM/GeoModBox.jl/blob/main/examples/StokesEquation/2D/FallingBlockBenchmark.jl)","page":"Falling Block Benchmar","title":"Falling Block Benchmar","text":"","category":"section"},{"location":"man/examples/FallingBlockBenchmark/","page":"Falling Block Benchmar","title":"Falling Block Benchmar","text":"-> A sript, solving the falling block benchmark for a viscosity range from -6 to 6 order of magnitude. The script stores the sinking velocity of the block at the initial configuration and the final marker distribution for models with a viscosity ration over and equal 0. ","category":"page"},{"location":"man/examples/ForwardEuler_DC/#[Diffusion-Equation-(Forward-Euler)](https://github.com/GeoSci-FFM/GeoModBox.jl/blob/main/examples/DiffusionEquation/2D/ForwardEuler.jl)","page":"Forward Euler (2D)","title":"Diffusion Equation (Forward Euler)","text":"","category":"section"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"This is a straight forward example to solve the conductive part of the 2-D temperature conservation equation using the forward euler method. The focus lies on the","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"application of the expanded temperature field and boundary conditions,\nimplementation of the analytical solution (ExactFieldSolution.jl), and\napplication of the forward Euler method. ","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"The example calculates the numerical solution of a transient diffusion of an initial, Gaussian 2-D temperature distribution. The peak T0 of the Gaussian anomaly is located in the center of the model domain with a certain width sigma. The diffusion is controlled by the diffusion coefficient (thermal conductivity) K. ","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"The accuracy of the numerical solution is checked with its analytical solution. The results are plotet for ever nout time step in a single figure. ","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"First one needs to define the geometry and the numerical parameters. ","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"# Spatial domain\nxlim = (min=-1/2, max=1/2)\nylim = (min=-1/2, max=1/2)\nnc   = (x=100, y=100)\nnv   = (x=nc.x+1, y=nc.y+1)\nnc   = (x=nc.x+0, y=nc.y+0)\nnv   = (x=nv.x+0, y=nv.y+0)\nΔ    = (x=(xlim.max-xlim.min)/nc.x, y=(ylim.max-ylim.min)/nc.y)\nx    = (c=LinRange(xlim.min+Δ.x/2, xlim.max-Δ.x/2, nc.x), v=LinRange(xlim.min, xlim.max, nv.x))\ny    = (c=LinRange(ylim.min+Δ.y/2, ylim.max-Δ.y/2, nc.y), v=LinRange(ylim.min, ylim.max, nv.y))","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"Now, one needs to define the time parameters. ","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"# Time domain\nnt   = 400\nt    = 0.\nnout = 10 ","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"In the following, all fields and parameter arrays are initialized. ","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"# Primitive variables\nT_ex  = zeros(nc.x+2, nc.y+2)\nT     = zeros(nc...)\nTe    = zeros(nc...)\n# Derived fields\n∂T    = (∂x=zeros(nv.x, nc.x), ∂y=zeros(nc.x, nv.x))\nq     = ( x=zeros(nv.x, nc.x),  y=zeros(nc.x, nv.x))\n# Material parameters\nρ     = zeros(nc...)\nCp    = zeros(nc...)\nk     = ( x=zeros(nv.x, nc.x), y=zeros(nc.x, nv.x))","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"Here, the boundary conditions are defined, using a named tuple BC. The tuple contains the type (Dirichlet or Neumann) and the value of each boundary (North, East, South, West). ","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"# Boundary conditions\nBC   = (\n    type = (W=:Dirichlet, E=:Dirichlet, S=:Dirichlet, N=:Dirichlet),\n    val  = (W=zeros(nc.y), E=zeros(nc.y), S=zeros(nc.x), N=zeros(nc.x)))","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"As initial condition, the analytical solution for the time t=0 is choosen. Also, the values for the physical parameter are assigned. Here, all parameters are non-dimensional. ","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"# Initial conditions\nAnalyticalSolution2D!(T, x.c, y.c, t,(T0=1.0,K=1e-6,σ=0.1))\n@. k.x = 1e-6 \n@. k.y = 1e-6\n@. ρ   = 1.0\n@. Cp  = 1.0\nΔt = max(Δ...)^2/(maximum(k.x)/minimum(ρ)/minimum(Cp))/4.1","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"Now, the time loop can start. Within the time loop, the time, the analytical solution and the value for the boundaries is calculated within the following. ","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"# Time integration\n@views for it=1:nt\n    t += Δt\n    # Exact solution on cell centroids\n    AnalyticalSolution2D!(Te, x.c, y.c, t,(T0=1.0,K=1e-6,σ=0.1))\n    # Exact solution on cell boundaries\n    BoundaryConditions2D!(BC, x.c, y.c, t,(T0=1.0,K=1e-6,σ=0.1))","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"In the following, the temperature conservation equation is solved using the forward euler method. That is, the temperature at the new time step is completly calculated from the temperature field of the old time step. To solve the equations for the centroids along the boundaries of the model domain, one needs to update the temperature of the ghost nodes according to the defined boundary condition. Once, the temperature is defined on the expanded grid, one can calculate the temperature flux using central finite differences and the given heat flux. The central differences of the heat flux determine the temperature a the new time step. For more details on the finit difference discretization of the temperature conservation equation, please refere to the documentation.","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"    @. T_ex[2:end-1,2:end-1] = T \n    @. T_ex[  1,2:end-1] = (BC.type.W==:Dirichlet) * (2*BC.val.W - T_ex[    2,2:end-1])# + (BC.type.W==:Neumann) * (T_ex[    2,2:end-1] - Δ.x/k.x[  1,:]*BC.val.W)\n    @. T_ex[end,2:end-1] = (BC.type.E==:Dirichlet) * (2*BC.val.E - T_ex[end-1,2:end-1])# + (BC.type.E==:Neumann) * (T_ex[end-1,2:end-1] + Δ.x/k.x[end,:]*BC.val.E)\n    @. T_ex[2:end-1,  1] = (BC.type.S==:Dirichlet) * (2*BC.val.S - T_ex[2:end-1,    2])# + (BC.type.S==:Neumann) * (T_ex[2:end-1,    2] - Δ.y/k.y[:,  1]*BC.val.S)\n    @. T_ex[2:end-1,end] = (BC.type.N==:Dirichlet) * (2*BC.val.N - T_ex[2:end-1,end-1])# + (BC.type.N==:Neumann) * (T_ex[2:end-1,end-1] - Δ.y/k.y[:,end]*BC.val.N)\n    @. ∂T.∂x = (T_ex[2:end,2:end-1] - T_ex[1:end-1,2:end-1])/Δ.x\n    @. ∂T.∂y = (T_ex[2:end-1,2:end] - T_ex[2:end-1,1:end-1])/Δ.y\n    @. q.x   = -k.x * ∂T.∂x\n    @. q.y   = -k.y * ∂T.∂y\n    @. T    -= Δt *( (q.x[2:end,:] - q.x[1:end-1,:])/Δ.x + (q.y[:,2:end] - q.y[:,1:end-1])/Δ.y )","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"Finally, the analytical and numerical solution and its error are plotted for each nout time step. ","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"    # Visualisation\n    if mod(it, nout)==0\n        p1 = plot(aspect_ratio=1, xlims=(xlim...,), ylims=(ylim...,))\n        p1 = heatmap!(x.c, y.c, Te', title=\"Analytics\")\n        p2 = plot(aspect_ratio=1, xlims=(xlim...,), ylims=(ylim...,))\n        p2 = heatmap!(x.c, y.c, T', title=\"Numerics\")\n        p3 = plot(aspect_ratio=1, xlims=(xlim...,), ylims=(ylim...,))\n        p3 = heatmap!(x.c, y.c, (abs.(T-Te))', title=\"Error\")\n        display(plot(p1, p2, p3, layout=(2,2)))\n    end\nend","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"(Image: FE2DDiff) ","category":"page"},{"location":"man/examples/ForwardEuler_DC/","page":"Forward Euler (2D)","title":"Forward Euler (2D)","text":"Figure 1. Final plot for the forward Euler solution.","category":"page"},{"location":"man/examples/RTI/#[Rayleigh-Taylor-Instability](https://github.com/GeoSci-FFM/GeoModBox.jl/blob/main/examples/StokesEquation/2D/RTI.jl)","page":"Rayleigh Taylor Instability","title":"Rayleigh Taylor Instability","text":"","category":"section"},{"location":"man/examples/RTI/","page":"Rayleigh Taylor Instability","title":"Rayleigh Taylor Instability","text":"...tba...","category":"page"},{"location":"man/examples/FallingBlockDC/#[Falling-Block;-Defect-Correction](https://github.com/GeoSci-FFM/GeoModBox.jl/blob/main/examples/StokesEquation/2D/FallingBlockConstEta_Dc.jl)","page":"Falling Block; Defect Correction","title":"Falling Block; Defect Correction","text":"","category":"section"},{"location":"man/examples/FallingBlockDC/","page":"Falling Block; Defect Correction","title":"Falling Block; Defect Correction","text":"-> A sript, solving the falling block problem assuming a constant viscosity and using the defect correction method.","category":"page"},{"location":"man/examples/FallingBlockDC/","page":"Falling Block; Defect Correction","title":"Falling Block; Defect Correction","text":"","category":"page"},{"location":"man/examples/FallingBlockDC/#[Falling-Block;-Defect-Correction](https://github.com/GeoSci-FFM/GeoModBox.jl/blob/main/examples/StokesEquation/2D/FallingBlockVarEta_DC.jl)","page":"Falling Block; Defect Correction","title":"Falling Block; Defect Correction","text":"","category":"section"},{"location":"man/examples/FallingBlockDC/","page":"Falling Block; Defect Correction","title":"Falling Block; Defect Correction","text":"-> A sript, solving the falling block problem assuming a variable viscosity and using the defect correction method. The advection is only provided with tracers","category":"page"},{"location":"man/examples/PoissonVariablek/#[Poisson-Problem-(variable-k)](https://github.com/GeoSci-FFM/GeoModBox.jl/blob/main/examples/DiffusionEquation/2D/Poisson_variable_k.jl)","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem (variable k)","text":"","category":"section"},{"location":"man/examples/PoissonVariablek/","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem; variable k (2D)","text":"This examples solves the steady-state, 2-D temperature equation, i.e. a Poisson equation, assuming a variable thermal conductivity k. ","category":"page"},{"location":"man/examples/PoissonVariablek/","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem; variable k (2D)","text":"For more details on the model setup and the physics or the numerical scheme, please see the exercise or the documentation","category":"page"},{"location":"man/examples/PoissonVariablek/","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem; variable k (2D)","text":"","category":"page"},{"location":"man/examples/PoissonVariablek/","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem; variable k (2D)","text":"First one needs to define the geometrical and physical constants. ","category":"page"},{"location":"man/examples/PoissonVariablek/","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem; variable k (2D)","text":"# Physikalischer Parameter ---------------------------------------------- #\nP       =   (\n    L           =   4e3,      #   [m]\n    H           =   2e3,      #   [m]\n    k1          =   3.2,      #   Waermeleitfaehigkeit, W/m/K\n    k2          =   6.2,      #   Waermeleitfaehigkeit, W/m/K\n    Wcave       =   200,      #\n    Hcave       =   200,      #\n    Dcave       =   1e3,      # \n    Xcave       =   2.0e3, \n    Q           =   0.3       # W/m³ Q = rho*H\n)\n# ----------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/PoissonVariablek/","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem; variable k (2D)","text":"Now, one needs the set up the grid and its coordinates.","category":"page"},{"location":"man/examples/PoissonVariablek/","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem; variable k (2D)","text":"# Numerische Parameter -------------------------------------------------- #\nNC      =   (\n    x           =   641,      #   Gitterpunkte in x-Richtung\n    y           =   321       #   Gitterpunkte in y-Richtung\n)\nNV      =   (\n    x           =   NC.x + 1, \n    y           =   NC.y + 1\n)\n# Initialize grid spacing ----------------------------------------------- #\nΔ       = (\n    x       =   P.L/NC.x,\n    y       =   P.H/NC.y\n)\n# ----------------------------------------------------------------------- #\n# Generate the grid ----------------------------------------------------- #\nx       = (\n    c       =   LinRange(0.0 + Δ.x/2.0, P.L - Δ.x/2.0, NC.x),\n    v       =   LinRange(0.0, P.L, NV.x)\n)\ny       = (\n    c       =   LinRange(-P.H + Δ.y/2.0, 0.0 - Δ.y/2.0, NC.y),\n    v       =   LinRange(-P.H, 0.0, NV.y)\n)\n# ----------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/PoissonVariablek/","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem; variable k (2D)","text":"Dirichlet boudnary condition are assumed on all sides. ","category":"page"},{"location":"man/examples/PoissonVariablek/","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem; variable k (2D)","text":"# Boundary conditions --------------------------------------------------- #\nBC      =   (\n    type    = (W=:Dirichlet, E=:Dirichlet, N=:Dirichlet, S=:Dirichlet),\n    # type    = (W=:Dirichlet, E=:Dirichlet, N=:Dirichlet, S=:Dirichlet),\n    val     = (W=zeros(NC.y,1),E=zeros(NC.y,1),N=zeros(NC.x,1),S=zeros(NC.x,1))\n)\n# ----------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/PoissonVariablek/","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem; variable k (2D)","text":"In addition to the temperature and the heat source one needs to define two fields for the thermal conductivity, one for the horizontal and one for the vertical conductivity. The heat source and conductivity need to be assinged to the corresponding nodes. ","category":"page"},{"location":"man/examples/PoissonVariablek/","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem; variable k (2D)","text":"# Initialcondition ------------------------------------------------------ #\nD       = ( \n    Q       =   zeros(NC...),           # (row,col) \n    T       =   zeros(NC...),\n    kx      =   zeros(NV.x,NC.y),\n    ky      =   zeros(NC.x,NV.y)\n)\n# Heat production rate in the anomaly ---\nfor i = 1:NC.x, j = 1:NC.y\n    if x.c[i] >= (P.Xcave-P.Wcave/2.0) && x.c[i] <=(P.Xcave+P.Wcave/2.0) && \n        y.c[j] >= -P.Dcave-P.Hcave/2.0 && y.c[j] <= -P.Dcave+P.Hcave/2.0 \n        D.Q[i,j]    = P.Q\n    end\nend\nD.kx[:,y.c.>=-P.H/2.0]      .=  P.k1\nD.kx[:,y.c.<-P.H/2.0]       .=  P.k2\nD.ky[x.c.>=P.L/2.0,:]       .=  P.k1\nD.ky[x.c.<P.L/2.0,:]        .=  P.k2\n# ----------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/PoissonVariablek/","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem; variable k (2D)","text":"To solve the linear system of equations, one needs to define the coefficient matrix and its degree of freedom and initialized the right-hand side vector. ","category":"page"},{"location":"man/examples/PoissonVariablek/","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem; variable k (2D)","text":"# Linear System of Equations -------------------------------------------- #\nNum     =   (T=reshape(1:NC.x*NC.y, NC.x, NC.y),)\nndof    =   maximum(Num.T)\nK       =   ExtendableSparseMatrix(ndof,ndof)\nrhs     =   zeros(ndof)\n# ----------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/PoissonVariablek/","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem; variable k (2D)","text":"Now, all parameter are defined and one can solve the linear system of equations using the function Poisson2D!(). ","category":"page"},{"location":"man/examples/PoissonVariablek/","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem; variable k (2D)","text":"# Solve equation -------------------------------------------------------- #\nPoisson2D!(D.T, D.Q, D.kx, D.ky, Δ.x, Δ.y, NC, BC, K, rhs, Num )\n# ----------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/PoissonVariablek/","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem; variable k (2D)","text":"Finally, one can plot the steady-state solution of the temperature conservation equation and, for clarity, the different thermal conductivities.  ","category":"page"},{"location":"man/examples/PoissonVariablek/","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem; variable k (2D)","text":"# Plot solution --------------------------------------------------------- #\np = heatmap(x.c ./ 1e3, y.c ./ 1e3, D.T', \n        color=:viridis, colorbar=true, aspect_ratio=:equal, \n        xlabel=\"x [km]\", ylabel=\"z [km]\", \n        title=\"Stationary temperature field\", \n        xlims=(0, P.L/1e3), ylims=(-P.H/1e3, 0.0), \n        clims=(0, 900))\n\ncontour!(p, x.c ./ 1e3, y.c ./ 1e3, D.T', \n    levels=100:100:1500, linecolor=:black,subplot=1)\n\nq = heatmap(x.v ./ 1e3, y.c ./ 1e3, D.kx', \n    color=:viridis, colorbar=true, aspect_ratio=:equal, \n    xlabel=\"x [km]\", ylabel=\"z [km]\", \n    title=\"horizontal conductivity\", \n    xlims=(0, P.L/1e3), ylims=(-P.H/1e3, 0.0), \n    layout=(1,2),subplot=1)\nheatmap!(q,x.c ./ 1e3, y.v ./ 1e3, D.ky', \n    color=:viridis, colorbar=true, aspect_ratio=:equal, \n    xlabel=\"x [km]\", ylabel=\"z [km]\", \n    title=\"vertical conductivity\", \n    xlims=(0, P.L/1e3), ylims=(-P.H/1e3, 0.0), \n    subplot=2)\n\ndisplay(p)\ndisplay(q)\n\nsavefig(p,\"./examples/DiffusionEquation/2D/Results/Poisson_variable_k_01.png\")\nsavefig(q,\"./examples/DiffusionEquation/2D/Results/Poisson_variable_k_02.png\")\n# ----------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/PoissonVariablek/","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem; variable k (2D)","text":"(Image: PPvari)","category":"page"},{"location":"man/examples/PoissonVariablek/","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem; variable k (2D)","text":"Figure 1. Temperature distribution for variable thermal parameters.","category":"page"},{"location":"man/examples/PoissonVariablek/","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem; variable k (2D)","text":"(Image: PPvari)","category":"page"},{"location":"man/examples/PoissonVariablek/","page":"Poisson Problem; variable k (2D)","title":"Poisson Problem; variable k (2D)","text":"Figure 2. Thermal conductivity distribution.","category":"page"},{"location":"man/license/","page":"-","title":"-","text":"MIT License","category":"page"},{"location":"man/license/","page":"-","title":"-","text":"Copyright (c) 2024 Goethe Universität Frankfurt, Institut für Geowissenschaften","category":"page"},{"location":"man/license/","page":"-","title":"-","text":"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:","category":"page"},{"location":"man/license/","page":"-","title":"-","text":"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.","category":"page"},{"location":"man/license/","page":"-","title":"-","text":"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"man/examples/BackwardEuler_DC/#[Diffusion-Equation-(Backward-Euler)](https://github.com/GeoSci-FFM/GeoModBox.jl/blob/main/examples/DiffusionEquation/2D/BackwardEuler.jl)","page":"Backward Euler (2D)","title":"Diffusion Equation (Backward Euler)","text":"","category":"section"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"This is a straight forward example to solve the conductive part of the 2-D temperature conservation equation using the defect correction method. The focus lies on the","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"application of the expanded temperature field and boundary conditions,\nset up of the coefficient matrix and residual vector,\nimplementation of the analytical solution (ExactFieldSolution.jl), and\napplication of the defect correction method. ","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"The example calculates the numerical solution of a transient diffusion of an initial, Gaussian 2-D temperature distribution. The peak T0 of the Gaussian anomaly is located in the center of the model domain with a certain width sigma. The diffusion is controlled by the diffusion coefficient (thermal conductivity) K. ","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"The accuracy of the numerical solution is checked with its analytical solution. The results are plotet for ever nout time step in a single figure. ","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"First one needs to define the geometry and the numerical parameters. ","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"# Spatial domain\nxlim = (min=-1/2, max=1/2)\nylim = (min=-1/2, max=1/2)\nnc   = (x=100, y=100)\nnv   = (x=nc.x+1, y=nc.y+1)\nnc   = (x=nc.x+0, y=nc.y+0)\nnv   = (x=nv.x+0, y=nv.y+0)\nΔ    = (x=(xlim.max-xlim.min)/nc.x, y=(ylim.max-ylim.min)/nc.y)\nx    = (c=LinRange(xlim.min+Δ.x/2, xlim.max-Δ.x/2, nc.x), v=LinRange(xlim.min, xlim.max, nv.x))\ny    = (c=LinRange(ylim.min+Δ.y/2, ylim.max-Δ.y/2, nc.y), v=LinRange(ylim.min, ylim.max, nv.y))","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"Now, one needs to define the time parameters and parameters for the solution iteration. ","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"# Time domain\nnt   = 500\nt    = 0.\nnout = 10 \n# Iterations\nniter = 10\nϵ     = 1e-10","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"In the following, all fields and parameter arrays are initialized. ","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"# Primitive variables\nT_ex  = zeros(nc.x+2, nc.y+2)\nT     = zeros(nc...)\nT0    = zeros(nc...)\nTe    = zeros(nc...)\n# Derived fields\n∂T    = (∂x=zeros(nv.x, nc.x), ∂y=zeros(nc.x, nv.x))\nq     = (x=zeros(nv.x, nc.x), y=zeros(nc.x, nv.x))\n# Material parameters\nρ     = zeros(nc...)\nCp    = zeros(nc...)\nk     = (x=zeros(nv.x, nc.x), y=zeros(nc.x, nv.x))\n# Residuals\nR     = zeros(nc...)","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"Here, the boundary conditions are defined, using a named tuple BC. The tuple contains the type (Dirichlet or Neumann) and the value of each boundary (North, East, South, West). Additionally, the array for the numbering of the equation is initialized. ","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"# Boundary conditions\nBC   = (\n    type = (W=:Dirichlet, E=:Dirichlet, S=:Dirichlet, N=:Dirichlet),\n    # type = (W=:Neumann, E=:Neumann, S=:Neumann, N=:Neumann),\n    val  = (W=zeros(nc.y), E=zeros(nc.y), S=zeros(nc.x), N=zeros(nc.x)))\n# Numbering \nNum    = (T=reshape(1:nc.x*nc.y, nc.x, nc.y),)","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"As initial condition, the analytical solution for the time t=0 is choosen. Also, the values for the physical parameter are assigned. Here, all parameters are non-dimensional. ","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"# Initial conditions\nAnalyticalSolution2D!(T, x.c, y.c, t,(T0=1.0,K=1e-6,σ=0.1))\n@. k.x = 1e-6 \n@. k.y = 1e-6\n@. ρ   = 1.0\n@. Cp  = 1.0\nΔt = max(Δ...)^2/(maximum(k.x)/minimum(ρ)/minimum(Cp))/4.1","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"Now, the time loop can start. Within the time loop, the time, the analytical solution and the value for the boundaries is calculated within the following. ","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"# Time integration Loop\nfor it=1:nt\n    @printf(\"Time step = %05d\\n\", it)\n    t += Δt\n    @. T0 = T\n    # Exact solution on cell centroids\n    AnalyticalSolution2D!(Te, x.c, y.c, t,(T0=1.0,K=1e-6,σ=0.1))\n    # Exact solution on cell boundaries\n    BoundaryConditions2D!(BC, x.c, y.c, t,(T0=1.0,K=1e-6,σ=0.1))","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"The temperature conservation equation is solved in the following using the defect correction method. Therefore, one first needs to determine the residual (ComputeResiduals2D!()) of the system of equations, assuming an initial guess. If the residual is small enough (ϵ), the solution iteration is stopped. ","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"Note: The iteration is only necessary, if the system is non-linear. Here, the final solution is found after one iteration. ","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"For more details on the defect correction method, please refer to the documentation.","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"    # Iteration loop\n    for iter=1:niter\n        # Evaluate residual\n        ComputeResiduals2D!(R, T, T_ex, T0, ∂T, q, ρ, Cp, k, BC, Δ, Δt)\n        @printf(\"||R|| = %1.4e\\n\", norm(R)/length(R))\n        norm(R)/length(R) < ϵ ? break : nothing\n        # Assemble linear system\n        K  = AssembleMatrix2D(ρ, Cp, k, BC, Num, nc, Δ, Δt)\n        # Solve for temperature correction: Cholesky factorisation\n        Kc = cholesky(K.cscmatrix)\n        # Solve for temperature correction: Back substitutions\n        δT = -(Kc\\R[:])\n        # Update temperature\n        @. T += δT[Num.T]\n    end","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"Finally, the analytical and numerical solution and its error are plotted for each nout time step. ","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"    # Visualisation\n    if mod(it, nout)==0\n        p1 = plot(aspect_ratio=1, xlims=(xlim...,), ylims=(ylim...,))\n        p1 = heatmap!(x.c, y.c, Te', title=\"Analytics\")\n        p2 = plot(aspect_ratio=1, xlims=(xlim...,), ylims=(ylim...,))\n        p2 = heatmap!(x.c, y.c, T', title=\"Numerics\")\n        p3 = plot(aspect_ratio=1, xlims=(xlim...,), ylims=(ylim...,))\n        p3 = heatmap!(x.c, y.c, (abs.(T-Te))', title=\"Error\")\n        display(plot(p1, p2, p3, layout=(2,2)))\n    end\nend","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"(Image: BE2DDiff)","category":"page"},{"location":"man/examples/BackwardEuler_DC/","page":"Backward Euler (2D)","title":"Backward Euler (2D)","text":"Figure 1. Final plot for the backward Euler solution using the defect correction method. ","category":"page"},{"location":"man/examples/ChannelFlow1D/#[Channel-Flow;-Defect-correction-(1D)](https://github.com/GeoSci-FFM/GeoModBox.jl/blob/main/examples/StokesEquation/1D/ChannelFlow_1D.jl)","page":"Channel Flow; Defect correction (1D)","title":"Channel Flow; Defect correction (1D)","text":"","category":"section"},{"location":"man/examples/ChannelFlow1D/","page":"Channel Flow; Defect correction (1D)","title":"Channel Flow; Defect correction (1D)","text":"<!–","category":"page"},{"location":"man/examples/ChannelFlow1D/#Channel-Flow","page":"Channel Flow; Defect correction (1D)","title":"Channel Flow","text":"","category":"section"},{"location":"man/examples/ChannelFlow1D/","page":"Channel Flow; Defect correction (1D)","title":"Channel Flow; Defect correction (1D)","text":"&emsp; Assuming the horizontal pressure gradient is constant and flow within a channel is only driven by the pressure and/or by a constant horizonal velocity at the surface (or at the bottom, or both), the stokes equation describes the horizontal flow velocity within the channel and simplifies to: ","category":"page"},{"location":"man/examples/ChannelFlow1D/","page":"Channel Flow; Defect correction (1D)","title":"Channel Flow; Defect correction (1D)","text":"For the given setup I can assume that the vertical velocity is zero and thus equation (3) simplifies to the last expression of equation (2).","category":"page"},{"location":"man/examples/ChannelFlow1D/","page":"Channel Flow; Defect correction (1D)","title":"Channel Flow; Defect correction (1D)","text":"&emsp; This directory contains a script to calculate the horizontal velocity for a two-dimensional Couette(-Poiseuille) channel flow with constant and logarithmically, with depth varying viscosity and to compare the numerical solution with its analytical solution. The depth-dependent viscosity is defined as: ","category":"page"},{"location":"man/examples/ChannelFlow1D/","page":"Channel Flow; Defect correction (1D)","title":"Channel Flow; Defect correction (1D)","text":"eta = eta_0 exp(log(m) fracH-zH)","category":"page"},{"location":"man/examples/ChannelFlow1D/","page":"Channel Flow; Defect correction (1D)","title":"Channel Flow; Defect correction (1D)","text":",","category":"page"},{"location":"man/examples/ChannelFlow1D/","page":"Channel Flow; Defect correction (1D)","title":"Channel Flow; Defect correction (1D)","text":"where m is the viscosity ratio of fraceta_1eta_0, eta_0 and eta_1 are the bottom and surface viscosities, respectively, H is the model height, and z the depth. ","category":"page"},{"location":"man/examples/ChannelFlow1D/","page":"Channel Flow; Defect correction (1D)","title":"Channel Flow; Defect correction (1D)","text":"&emsp;Considering the definition of the viscosity as given in equation (4), one can derive an analytical solution of the horizontal velocity from the 1-D stokes equation in x-direction by twice integrating equation (1). The analytical solution with depth depends on the viscosity ratio m, the horizontal pressure gradient fracpartial Ppartial x, and the shear velocity at the surface v_x0. For an upward pointing coordinate system (z positive) the analytical solution is given as: ","category":"page"},{"location":"man/examples/ChannelFlow1D/","page":"Channel Flow; Defect correction (1D)","title":"Channel Flow; Defect correction (1D)","text":"v_xana =-frac12 eta_0 fracpartial Px (Hz - z^2) + v_x0fraczH","category":"page"},{"location":"man/examples/ChannelFlow1D/","page":"Channel Flow; Defect correction (1D)","title":"Channel Flow; Defect correction (1D)","text":",&emsp;&emsp; if m = 1, and &emsp;&emsp;&emsp; (5)","category":"page"},{"location":"man/examples/ChannelFlow1D/","page":"Channel Flow; Defect correction (1D)","title":"Channel Flow; Defect correction (1D)","text":"v_xana = -fracpartial Ppartial x fracHeta_0 log(m) (fracm^-fraczHm-1(z(m-1)+H) - fracHm-1)-m^-fraczH m fracv_x0m-1 + fracv_x0mm-1","category":"page"},{"location":"man/examples/ChannelFlow1D/","page":"Channel Flow; Defect correction (1D)","title":"Channel Flow; Defect correction (1D)","text":", &emsp;&emsp; if m neq 0.&emsp;&emsp;&emsp; (6)","category":"page"},{"location":"man/examples/ChannelFlow1D/","page":"Channel Flow; Defect correction (1D)","title":"Channel Flow; Defect correction (1D)","text":"&emsp;The numerical solution is calculated using fixed boundary velocities, which are defined by the analytical solution of the horizontal velocity as defined in equations (5) and (6) and I simply flip the analytical solution so that it fits to the downward point coordinate system I use in the code. –>","category":"page"},{"location":"man/DiffOneD/#Temperature-Equation-(1D)","page":"1D","title":"Temperature Equation (1D)","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"In one dimension, the conductive component of the temperature equation is expressed as follows, assuming only radiogenic heat sources:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracpartial Tpartial t = -fracpartial q_xpartial x + rho H\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"By incorporating Fourier’s law and allowing for spatially variable thermal properties, the equation becomes:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracpartial Tpartial t = fracpartialpartial x k_x fracpartial Tpartial x + rho H \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Assuming constant thermal properties, Equation (2) simplifies to:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracpartial Tpartial t = kappa fracpartial^2 Tpartial x^2 + fracQrho c_p\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where kappa = krhoc_p is the thermal diffusivity [m²/s], and Q = rho H is the volumetric heat production rate [W/m³].  ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Equation (3) is classified as a parabolic partial differential equation (PDE), which can be solved numerically given appropriate initial and boundary conditions.","category":"page"},{"location":"man/DiffOneD/#Discretization-and-Numerical-Schemes","page":"1D","title":"Discretization and Numerical Schemes","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"To solve Equation (3) numerically, the spatial domain must be discretized, assigning physical parameters to their corresponding grid locations.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Note: Although thermal conductivity is currently assumed to be constant, a conservative gridding approach is employed to ensure physical consistency. In this scheme, temperature T is defined at cell centers (centroids), while heat flux q is defined at cell interfaces (vertices).","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"(Image: 1DDiscretization)","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Figure 1. 1D Discretization. Conservative finite difference grid used to solve the 1D conductive part of the temperature equation. Temperature is defined at centroids, while heat flux is defined at vertices. Ghost nodes are introduced to implement Dirichlet and Neumann boundary conditions.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The example script Heat1Ddiscretization.jl demonstrates various numerical schemes for solving the conductive part of the temperature equation, including explicit, implicit, Crank–Nicolson, and defect correction methods. Below, we briefly describe these well-known schemes and highlight their respective strengths and limitations.","category":"page"},{"location":"man/DiffOneD/#Explicit-Finite-Difference-Scheme-(FTCS;-Forward-Euler)","page":"1D","title":"Explicit Finite Difference Scheme (FTCS; Forward Euler)","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"A fundamental and intuitive approach to solving the 1D heat conduction equation is the Forward in Time and Centered in Space (FTCS) scheme, implemented in an explicit manner.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"This method approximates the continuous PDE on a discrete grid and converges to the analytical solution as the spatial (Delta x) and temporal (Delta t) resolutions are refined. Its main advantages are simplicity and computational efficiency.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"However, the FTCS scheme is conditionally stable. Its stability is governed by the heat diffusion stability criterion, which can be derived via Von Neumann analysis. This assesses how numerical perturbations grow or decay over time.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"For a uniform grid, the stability condition is:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nDelta t  fracDeltax^22 kappa\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Consequently, the maximum allowable time step is constrained by the spatial resolution.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Discretizing Equation (3) with the FTCS scheme gives:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracT_i^n+1 - T_i^n Delta t = kappa fracT_i-1^n - 2T_i^n + T_i+1^nDeltax^2 + fracQ_i^nrho c_p\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where  i is the spatial grid index, n is the time step index, Delta x is the grid spacing, Delta t is the time step, and Q_i^n is the heat production rate at node i and time n.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Solving for T_i^n+1:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nT_i^n+1 = T_i^n + a left(T_i-1^n - 2T_i^n + T_i+1^n right) + fracQ_i^n Delta trho c_p \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where a = frackappa Delta tDelta x^2.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Equation (6) is solved for all interior nodes at each time step, assuming initial and boundary conditions are specified.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"For implementation details, see the source code.","category":"page"},{"location":"man/DiffOneD/#Boundary-Conditions","page":"1D","title":"Boundary Conditions","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Boundary conditions are implemented using ghost nodes. Here, we consider the two most common thermal boundary conditions: Dirichlet and Neumann.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Dirichlet Boundary Condition","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The Dirichlet condition specifies a fixed temperature at the boundary. The temperature at the left (West) and right (East) ghost nodes is given by:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nT_GW = 2T_BCW - T_1\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nT_GE = 2T_BCE - T_nc\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where  T_BCW and T_BCE are the prescribed boundary temperatures, T_1 and T_nc are the temperatures at the first and last interior centroids, T_GW and T_GE are the ghost node temperatures on the west and east boundaries, and nc is the number of centroids.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Neumann Boundary Condition","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The Neumann condition specifies a fixed gradient (e.g., a heat flux or temperature gradient) at the boundary. The ghost node temperatures are defined as:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nT_GW = T_1 - c_W Deltax\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nT_GE = T_nc + c_E Deltax\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"with:  ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nleft c_W = fracpartialTpartialx rightvert_W textrmand left c_E = fracpartialTpartialx rightvert_E \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where c_W and c_E are the prescribed temperature gradients on the west and east boundaries, respectively.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"These ghost node definitions are substituted into the numerical scheme to consistently enforce the boundary conditions at each time step.","category":"page"},{"location":"man/DiffOneD/#Implicit-Scheme-(Backward-Euler)","page":"1D","title":"Implicit Scheme (Backward Euler)","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The fully implicit finite difference scheme, also known as the Backward Euler method, is unconditionally stable, allowing time steps larger than those permitted by the diffusion stability criterion.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"In 1D, the temperature equation becomes:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracT_i^n+1-T_i^nDelta t = kappa fracT_i-1^n+1-2T_i^n+1+T_i+1^n+1Deltax^2 + fracQ_i^nrho c_p\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where  i is the spatial index, n and n+1 are the current and next time steps, Delta t is the time step, and Delta x is the spatial grid spacing. ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Rearranging into known (right-hand side) and unknown (left-hand side) terms yields a linear system:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n-a T_i-1^n+1 + left(2a + b right) T_i^n+1 - a T_i+1^n+1 = b T_i^n + fracQ_i^nrho c_p\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"with  a = dfrackappaDelta x^2 and b = dfrac1Delta t.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"This equation results in a tridiagonal system of the form:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nmathbfA cdot vecx = vectextrhs\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where mathbfA is the coefficient matrix (with three non-zero diagonals), vecx is the unknown temperature vector at time n+1, and vectextrhs is the known right-hand side.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The coefficients are arranged to match the matrix structure used in the defect correction method, preserving modularity.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Note: While the implicit method is unconditionally stable, very large time steps may still yield inaccurate results, particularly for resolving small-scale thermal gradients.","category":"page"},{"location":"man/DiffOneD/#Boundary-Conditions-2","page":"1D","title":"Boundary Conditions","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The temperature at ghost nodes is defined as before (see Equations (7)-(10)). However, to maintain symmetry in the coefficient matrix and ensure consistent discretization near boundaries, both the matrix coefficients and the right-hand side must be modified for the nodes adjacent to the boundaries.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Dirichlet Boundary Condition","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"West boundary","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nleft(3 a + bright) T_1^n+1 - a T_2^n+1 = b T_1^n + 2 a T_BCW\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"East boundary","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n-a T_nc-1^n+1 + left(3 a + bright) T_nc^n+1  = b T_nc^n + 2 a T_BCE \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Neumann Boundary Condition","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"West boundary","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nleft(a + bright) T_1^n+1 - a T_2^n+1 = b T_1^n - a c_W Deltax\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"East boundary","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n-a T_nc-1^n+1 + left(a + bright) T_nc^n+1  = b T_nc^n + a c_E Deltax \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where  T_BCW, T_BCE are the prescribed boundary temperatures, c_W, c_E are the prescribed temperature gradients at the west and east boundaries, and nc is the number of centroids.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"These adjustments ensure that the boundary conditions are enforced consistently while preserving the symmetry and stability of the implicit solver.","category":"page"},{"location":"man/DiffOneD/#Defect-Correction-Method","page":"1D","title":"Defect Correction Method","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The defect correction method is an iterative scheme that progressively reduces the residual of the conductive part of the temperature equation using a correction term. If the system is linear, one iteration is sufficient to obtain the exact solution.","category":"page"},{"location":"man/DiffOneD/#Theory","page":"1D","title":"Theory","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The conductive part of the temperature equation, in implicit form, can be written as:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nmathbfK cdot T - b = R \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where  mathbfK is the coefficient matrix, T is the temperature at the new time step, b is a known term that includes contributions from the previous time step and internal heat sources, and R is the residual (or defect).","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Given an initial temperature guess T_i, the residual is:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nR_i = mathbfK cdot T_i - b\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"To reduce the residual, we define a correction delta T such that:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n0 = mathbfK left(T_i + deltaT right) - b = mathbfK T_i - b + mathbfK deltaT = R_i + mathbfK deltaT\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Rearranging gives: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nR_i = -mathbfK deltaT \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"and hence: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\ndeltaT = -mathbfK^-1 R_i \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Thus, the updated solution becomes: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nT_i+1 = T_i + delta T\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"In the linear case, this yields the exact solution in a single step. For nonlinear problems, the process is repeated iteratively until the residual is sufficiently small.","category":"page"},{"location":"man/DiffOneD/#Coefficient-Matrix","page":"1D","title":"Coefficient Matrix","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The matrix mathbfK can be derived from the discretized form of the temperature equation:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracpartialTpartialt - kappa fracpartial^2Tpartialx^2 = R \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"which discretizes to: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracT_i^n+1-T_i^nDeltat - kappa fracT_i-1^n+1 - 2 T_i^n+1 + T_i+1^n+1Deltax^2 = R\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"or equivalently:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n-a T_i-1^n+1 + left(2 a + b right) T_i^n+1 - a T_i+1^n+1 - b T_i^n = R \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\na = frackappaDeltax^2 textrmand  b = frac1Deltat \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"This structure defines the coefficients in mathbfK.","category":"page"},{"location":"man/DiffOneD/#Boundary-Conditions-3","page":"1D","title":"Boundary Conditions","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"As in the implicit FTCS method, the coefficients in mathbfK must be adjusted for centroids adjacent to the boundaries (see Equations (14)–(17)). However, the right-hand side vector b remains unchanged during these modifications.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"This makes the defect correction method efficient and modular, especially when reusing the same matrix structure across iterations or solver variants.","category":"page"},{"location":"man/DiffOneD/#Crank-Nicolson-approach-(CNA)","page":"1D","title":"Crank-Nicolson approach (CNA)","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The fully implicit FTCS method is unconditionally stable but only first-order accurate in time. To improve temporal accuracy while retaining stability, the Crank-Nicolson scheme can be used. This method employs a time-centered (implicit) discretization and is second-order accurate in time.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"In one dimension, the Crank-Nicolson discretization of the conductive part of the temperature equation (Equation (3)) becomes:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracT_i^n+1 - T_i^nDelta t = frackappa2frac(T_i-1^n+1-2T_i^n+1+T_i+1^n+1)+(T_i-1^n-2T_i^n+T_i+1^n)Deltax^2 \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Rearranging into known and unknown terms yields a linear system of the form:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n-aT_i-1^n+1 + left(b+2aright)T_i^n+1 - a T_i+1^n+1 = aT_i-1^n + left(b-2aright)T_i^n + a T_i+1^n\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"a = frackappa2Deltax^2quad textrmandquad b = frac1Deltat","category":"page"},{"location":"man/DiffOneD/#Boundary-Conditions-4","page":"1D","title":"Boundary Conditions","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"To obtain a symmetric coefficient matrix, both the matrix and the right-hand side vector must be modified at the boundaries. The equations for centroids adjacent to the boundaries are:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Dirichlet Boundary Conditions","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"West boundary","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nleft(b + 3 a right) T_1^n+1 - a T_2^n+1 = left( b - 3 a right) T_1^n + a T_2^n + 4 a T_BCW\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"East boundary","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n-a T_nc-1^n+1 + left(b + 3 a right) T_nc^n+1 = a T_nc-1^n + left( b - 3 a right) T_nc^n + 4 a T_BCE\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Neumann Boundary Conditions","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"West boundary","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nleft(b+aright)T_1^n+1 - a T_2^n+1 = left(b-aright)T_1^n + a T_2 - 2ac_W Deltax\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"East boundary","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n-a T_nc-1^n+1 + left(b+aright)T_nc^n+1  = a T_nc-1^n + left(b-aright)T_nc^n + 2ac_E Deltax\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The resulting coefficient matrix remains tridiagonal, preserving computational efficiency. However, memory requirements increase with finer spatial resolution due to the larger size of the linear system, making this method more memory-intensive.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"For implementation details, refer to the source code.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"","category":"page"},{"location":"man/DiffOneD/#Temperature-Field-Management","page":"1D","title":"Temperature Field Management","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"For the explicit solver and the defect correction method, the full temperature field—including ghost nodes—is used to evaluate the temperature equation. The old temperature field is assigned to the centroids of the extended grid to compute the new temperature.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"For the implicit methods (Backward Euler, Crank-Nicolson), the current temperature at the centroids is assigned to the right-hand side vector. The coefficient matrix is then assembled, and the new temperature is computed by solving the resulting linear system.","category":"page"},{"location":"man/DiffOneD/#Summary","page":"1D","title":"Summary","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"While the explicit FTCS scheme is simple and efficient for small time steps, implicit methods like Backward Euler and Crank-Nicolson are preferred for their unconditional stability. The Crank-Nicolson scheme further improves accuracy with its second-order time discretization. The defect correction method provides a flexible framework for both linear and nonlinear problems, allowing for iterative refinement when needed.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"","category":"page"},{"location":"man/DiffOneD/#Variable-Thermal-Parameters","page":"1D","title":"Variable Thermal Parameters","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"To solve the conductive component of the 1D temperature equation with spatially variable thermal properties, a conservative finite difference scheme is employed. In this formulation, temperature is defined at centroids, while heat flux and thermal conductivity are defined at vertices (see Figure 1).","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The governing equation is:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nrho c_p fracpartialTpartialt = fracpartialpartialyleft(k fracpartialTpartialyright) + rho H\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where rho is the density [kg/m³], c_p is the specific heat capacity [J/kg/K], T is the temperature [K], t is the time [s], k is the thermal conductivity [W/m/K],  H is the internal heat generation rate per unit mass [W/kg], and y is the vertical coordinate (depth) [m]","category":"page"},{"location":"man/DiffOneD/#Discretization","page":"1D","title":"Discretization","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"In a conservative scheme, the vertical conductive heat flux q_y is defined on vertices, as:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nleft q_ym = -k_m fracpartial Tpartial yrightvert_m textrmfor m = 1nv \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where n_v is the number of vertices.","category":"page"},{"location":"man/DiffOneD/#Explicit-Finite-Difference-Formulation","page":"1D","title":"Explicit Finite Difference Formulation","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Using the above discretization, the time evolution of temperature at each centroid is computed from:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nrho_j c_pj fracT_j^n+1 - T_j^nDeltat = -fracq_yj+1^n - q_yj^n Deltay + rho_j H_j textrmfor j = 1nc \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where  T is evaluated at centroids, q_y and k are evaluated at vertices, Delta t is the time step, and Delta y is the spatial grid resolution.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Substituting the expression for q_y gives:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nrho_j c_pj fracT_j^n+1 - T_j^nDeltat = frac k_j+1 fracT_j+1^n - T_j^nDeltay - k_j fracT_j^n - T_j-1^nDeltay Deltay + rho_j H_j\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Rewriting this into an explicit update formula for T_j^n+1:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nT_j^n+1 = ak_jT_j-1^n + left(1-aleft(k_j+1+k_jright)right)T_j^n + ak_j+1T_j+1^n + fracH_jDeltatc_pj\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\na = fracDeltatDeltay^2 rho c_p_j\nendequation","category":"page"},{"location":"man/DiffOneD/#Boundary-Conditions-5","page":"1D","title":"Boundary Conditions","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"For centroids adjacent to the boundaries, ghost nodes are used to evaluate the temperature gradient consistently with the chosen thermal boundary condition (Dirichlet or Neumann). These ghost node values are computed according to equations (7)–(10).","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"For implementation details, refer to the source code.","category":"page"},{"location":"man/examples/GaussianDiffusion2D/#[Gaussian-Diffusion-(2D)](https://github.com/GeoSci-FFM/GeoModBox.jl/blob/main/examples/DiffusionEquation/2D/Gaussian_Diffusion.jl)","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"","category":"section"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"This examples calculates are resolution test for different finite difference discretization scheme for the 2-D temperature conservation equation assuming constant thermal parameters and neglecting adiabatic pressure effects (i.e., a simple diffusion problem) using a Gaussian diffusion problem.","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"The following discretization scheme are used: ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"Forward Euler\nBackward Euler\nCrank-Nicolson\nAlternating-Direction Implicit\nDefect Correction","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"As initial condition, a Gaussian temperature distribution with a certain width and amplitude is assumed with it's peak at the center of the 2-D model domain. The transient behavior of this temperature distribution can be described analytically. Thus, one can calculate the accuracy for each time step of each finite difference scheme using this analytical solution. ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"The 2-D analytical solution is caluclated using the julia package ExactFieldSolutions. Using the analytical solution, the thermal boudnary conditions are updated for each time step. ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"In this example, for the sake of simplicity, the 2-D temperature conservation equation is solved seperately over time for each finite difference scheme. After each time loop, the transient behavior for each solution is saved in a small gif animaion showing the temperature distribution, it's absolute deviation from the analytical solution, a vertical prolile through the middle of the model domain, and the RMS. ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"For more details on the different numerical discretization schemes, please see the documentation.","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"First, let's define an array which includes the names of the different numerical schemes to be used. In the following, a loop is executed in which the individual scheme is called in the very beginning (via an if statement). Also, a mulitplication factor nrnxny is defined, which controlls the maximum resolution, that is nrnxny*20. ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"Within in each loop over the different numerical scheme, the resolution is consecutively increased up to the maximum defined resolution.","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"If save_fig = -1, only the final plot for the resolution test is shown and stored. For save_fig = 0 all fields are plotted, but not stored, and for save_fig = 1 the transient behavior for each resolution of each numerical scheme is stored in a gif animation. ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"Schema  =   [\"explicit\",\"implicit\",\"CNA\",\"ADI\",\"dc\"]\n# Schema      =   [\"ADI\"]\nns          =   size(Schema,1)\nnrnxny      =   6\nsave_fig    =   -1","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"Now, one needs to define the geometrical and physical parameters for the problem. ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"# Physical Parameters ------------------------------------------------ #\nP       = ( \n    L       =   200e3,          #   Length [ m ]\n    H       =   200e3,          #   Height [ m ]\n    k       =   3,              #   Thermal Conductivity [ W/m/K ]\n    cp      =   1000,           #   Specific Heat Capacity [ J/kg/K ]\n    ρ       =   3200,           #   Density [ kg/m^3 ]\n    K0      =   273.15,         #   Kelvin at 0 °C\n    Q0      =   0               #   Heat production rate\n)\nP1      = (\n    κ       =   P.k/P.ρ/P.cp,   #   Thermal Diffusivity [ m^2/s ] \n    Tamp    =   500,            #   Temperaturamplitude [K]\n    σ       =   20e3,           #   \n    Xc      =   0.0,            #   x-Coordinate of the Anomalycenter\n    Zc      =   0.0             #   y-Coordinate of the Anomalycenter\n)\nP       =   merge(P,P1)\n# -------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"Here, the arrays for the resolution test are initialized. ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"# Statistical Parameter ---------------------------------------------- #\nSt      = (\n    ε           =   zeros(size(Schema,1),nrnxny),    \n    nxny        =   zeros(size(Schema,1),nrnxny),\n    Tmax        =   zeros(size(Schema,1),nrnxny),\n    Tmean       =   zeros(size(Schema,1),nrnxny),\n    Tanamax     =   [0.0],\n    Tanamean    =   [0.0]\n)\n# -------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"Now, one can start the loop over the different numerical discretization schemes (m) and over the different resolutions (l). ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"# Loop over different discretization schemes ------------------------- #\nfor m = 1:ns\n    FDSchema = Schema[m]\n    display(FDSchema)\n    for l = 1:nrnxny","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"Within these loops, one needs to refine the grid parameter. ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"        # Numerical Parameters --------------------------------------- #\n        NC  = (\n            x       =   l*20,       #   Number of Centroids in x\n            y       =   l*20        #   Number of Centroids in y\n        )\n        Δ   = (\n            x       =   P.L/NC.x,   #   Grid spacing in x\n            y       =   P.H/NC.y    #   Grid Spacing in y\n        )\n        display(string(\"nx = \",NC.x,\", ny = \",NC.y))\n        # ------------------------------------------------------------ #","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"Since the name of the animation does contain the resolution, one needs to define it here new as well. ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"        # Animationssettings ----------------------------------------- #\n        path        =   string(\"./examples/DiffusionEquation/2D/Results/\")\n        anim        =   Plots.Animation(path, String[] )\n        filename    =   string(\"Gaussian_Diffusion_\",FDSchema,\n                            \"_nx_\",NC.x,\"_ny_\",NC.y)\n        # ------------------------------------------------------------ #","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"Also the grid corrdinates. ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"        # Grid coordinates ------------------------------------------- #\n        x       = (\n            c       =   LinRange(-P.L/2+ Δ.x/2.0, P.L/2 - Δ.x/2.0, NC.x),\n        )\n        y       = (\n            c       =   LinRange(-P.H/2 + Δ.y/2.0, P.H/2 - Δ.y/2.0, NC.y),\n        )\n        # ------------------------------------------------------------ #","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"For the sake of simplicity, the calculation of the time step is kept the same for each numerical scheme. Thus, it needs to fulfill the diffusion stability criterion and needs to be newly defined within each resolution loop. ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"        # Time Parameters -------------------------------------------- #\n        T       = (\n            year        =   365.25*3600*24,     #   Seconds per year\n            Δfac        =   1.0,                #   Factor for Explicit Stability Criterion\n        )\n        T1      = (\n            tmax        =   10 * 1e6 * T.year,  #   Maximum Time in [ s ]\n            Δ           =   [0.0]            \n        )\n        T       =   merge(T,T1)\n        T.Δ[1]  =   T.Δfac * (1.0 / ( 2.0 * P.κ * ( 1 /Δ.x^2 + 1 / Δ.y^2 )))\n        \n        nt      =   ceil(Int,T.tmax/T.Δ[1])     #   Number of Time Steps\n        time    =   zeros(1,nt)\n        # ------------------------------------------------------------ #","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"Now, one can initialize the field arrays and the initial condtion. ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"        # Initial Conditions  ---------------------------------------- #\n        D       = (\n            Q           =   zeros(NC...),\n            T           =   zeros(NC...),\n            T0          =   zeros(NC...),\n            T_ex        =   zeros(NC.x+2,NC.y+2),\n            Tana        =   zeros(NC...),\n            RMS         =   zeros(1,nt),\n            εT          =   zeros(NC...),\n            Tmax        =   zeros(1,nt),\n            Tmean       =   zeros(1,nt),\n            Tmaxa       =   zeros(1,nt),\n            Tprofile    =   zeros(NC.y,nt),\n            Tprofilea   =   zeros(NC.y,nt),\n            ρ           =   zeros(NC...),\n            cp          =   zeros(NC...)            \n        )\n        @. D.ρ  =   P.ρ\n        # Initial conditions\n        AnalyticalSolution2D!(D.T, x.c, y.c, time[1], (T0=P.Tamp,K=P.κ,σ=P.σ))\n        @. D.Tana                   =   D.T\n        @. D.T0                     =   D.T\n        D.T_ex[2:end-1,2:end-1]     .=  D.T","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"For visualization purposes, the temperature profile throught the middle of the domain is stored. ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"Note: Even though we do not assume a radioactive heat source, one needs to initialize the field and set it to zero. This is required by the solver. ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"        D.Tprofile[:,1]     .=  (D.T[convert(Int,NC.x/2),:] + \n                                    D.T[convert(Int,NC.x/2)+1,:]) / 2\n        D.Tprofilea[:,1]    .=  (D.Tana[convert(Int,NC.x/2),:] + \n                                    D.Tana[convert(Int,NC.x/2)+1,:]) / 2\n        # Heat production rate ---\n        @. D.Q          = P.Q0\n        # Visualize initial condition ---\n        # subplot 1 ---\n        p = heatmap(x.c ./ 1e3, y.c ./ 1e3, (D.T.-P.K0)', \n                color=:viridis, colorbar=false, aspect_ratio=:equal, \n                xlabel=\"x [km]\", ylabel=\"z [km]\", \n                title=\"Temperature\", \n                xlims=(-P.L/2/1e3, P.L/2/1e3), ylims=(-P.H/2/1e3, P.H/2/1e3), \n                clims=(minimum(D.T.-P.K0), maximum(D.T.-P.K0)),layout=(2,2),\n                subplot=1)\n            contour!(p,x.c./1e3,y.c/1e3,D.T'.-P.K0,\n                    levels=:5,linecolor=:black,subplot=1)\n            contour!(p,x.c./1e3,y.c/1e3,D.Tana'.-P.K0,\n                    levels=:5,linestyle=:dash,linecolor=:yellow,subplot=1)\n        # subplot 2 ---\n        heatmap!(p,x.c ./ 1e3, y.c ./ 1e3, D.εT', \n                color=:viridis, colorbar=true, aspect_ratio=:equal, \n                xlabel=\"x [km]\", ylabel=\"z [km]\", \n                title=\"Deviation\", \n                xlims=(-P.L/2/1e3, P.L/2/1e3), ylims=(-P.H/2/1e3, P.H/2/1e3),  \n                clims=(-1,1),layout=(2,2),\n                subplot=2)\n        # subplot 3 ---\n        plot!(p,D.Tprofile[:,1],y.c./1e3,\n                linecolor=:black,\n                xlabel=\"T_{x=L/2} [°C]\",ylabel=\"Depth [km]\",\n                label=\"\",\n                subplot=3)\n        plot!(p,D.Tprofilea[:,1],y.c./1e3,\n                linestyle=:dash,linecolor=:yellow,\n                xlabel=\"T_{x=L/2} [°C]\",ylabel=\"Depth [km]\",\n                label=\"\",\n                subplot=3)\n        # subplot 4 ---\n        plot!(p,time[1:end]./T.year./1e6,D.RMS[1:end],\n                label=\"\",\n                xlabel=\"Time [ Myrs ]\",ylabel=\"RMS\",\n                subplot=4)\n        if save_fig == 0\n            display(p)\n        end","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"(Image: GD2Dini)","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"Figure 1. Initial condition. Top left: Numerical temperature distribution (background colored field and black contour lines) overlain by the analytical solution (yellow dashed contours). Top right: Absolut deviation of the numerical from the analytical solution. Bottom left: Vertical temperature profile along the middle of the domain; black solid - numerical, yellow dashed - analytical. Bottom right: RMS over time. ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"Since the resolution does vary, one needs to define the boundary conditions wihitn the loop as well. ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"        # Boundary Conditions ---------------------------------------- #\n        BC     = (type    = (W=:Dirichlet, E=:Dirichlet, \n                                N=:Dirichlet, S=:Dirichlet),\n                    val     = (W=D.Tana[1,:],E=D.Tana[end,:],\n                                N=D.Tana[:,end],S=D.Tana[:,1]))\n        # ------------------------------------------------------------ #","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"Depending on the numerical method, one needs to define the coefficient matrix and degrees of freedom for the linear system of equations or the iterative parameters (for the defect correction method). ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"        if FDSchema == \"implicit\"\n            # Linear System of Equations ----------------------------- #\n            Num     =   (T=reshape(1:NC.x*NC.y, NC.x, NC.y),)\n            ndof    =   maximum(Num.T)\n            K       =   ExtendableSparseMatrix(ndof,ndof)\n            rhs     =   zeros(ndof)\n        end\n        if FDSchema == \"CNA\"\n            # Linear System of Equations ----------------------------- #\n            Num     =   (T=reshape(1:NC.x*NC.y, NC.x, NC.y),)\n            ndof    =   maximum(Num.T)\n            K1      =   ExtendableSparseMatrix(ndof,ndof)\n            K2      =   ExtendableSparseMatrix(ndof,ndof)\n            rhs     =   zeros(ndof)\n        end\n        if FDSchema == \"dc\"\n            niter       =   10\n            ϵ           =   1e-10\n            @. D.ρ      =   P.ρ\n            @. D.cp     =   P.cp\n            k           =   (x=zeros(NC.x+1,NC.x), y=zeros(NC.x,NC.x+1))\n            @. k.x      =   P.k\n            @. k.y      =   P.k\n            Num         =   (T=reshape(1:NC.x*NC.y, NC.x, NC.y),)\n            ndof        =   maximum(Num.T)\n            K           =   ExtendableSparseMatrix(ndof,ndof)\n            R           =   zeros(NC...)\n            ∂T          =   (∂x=zeros(NC.x+1, NC.x), ∂y=zeros(NC.x, NC.x+1))\n            q           =   (x=zeros(NC.x+1, NC.x), y=zeros(NC.x, NC.x+1))\n        end","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"Now, all parameters are defined to solve the 2-D temperature conservation equation in a time loop using the corresponding numerical scheme. The analytical solution is calculated seperately. ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"        # Time Loop -------------------------------------------------- #\n        for n = 1:nt\n            if n>1\n                if FDSchema == \"explicit\"\n                    ForwardEuler2Dc!(D, P.κ, Δ.x, Δ.y, T.Δ[1], D.ρ, P.cp, NC, BC)\n                elseif FDSchema == \"implicit\"\n                    BackwardEuler2Dc!(D, P.κ, Δ.x, Δ.y, T.Δ[1], D.ρ, P.cp, NC, BC, rhs, K, Num)\n                elseif FDSchema == \"CNA\"\n                    CNA2Dc!(D, P.κ, Δ.x, Δ.y, T.Δ[1], D.ρ, P.cp, NC, BC, rhs, K1, K2, Num)\n                elseif FDSchema == \"ADI\"\n                    ADI2Dc!(D, P.κ, Δ.x, Δ.y, T.Δ[1], D.ρ, P.cp, NC, BC)\n                elseif FDSchema == \"dc\"\n                    for iter = 1:niter\n                        # Evaluate residual\n                        ComputeResiduals2D!(R, D.T, D.T_ex, D.T0, ∂T, q, D.ρ, D.cp, k, BC, Δ, T.Δ[1])\n                        # @printf(\"||R|| = %1.4e\\n\", norm(R)/length(R))\n                        norm(R)/length(R) < ϵ ? break : nothing\n                        # Assemble linear system\n                        K  = AssembleMatrix2D(D.ρ, D.cp, k, BC, Num, NC, Δ, T.Δ[1])\n                        # Solve for temperature correction: Cholesky factorisation\n                        Kc = cholesky(K.cscmatrix)\n                        # Solve for temperature correction: Back substitutions\n                        δT = -(Kc\\R[:])\n                        # Update temperature\n                        @. D.T += δT[Num.T]\n                    end\n                    D.T0    .= D.T\n                end\n                time[n]     =   time[n-1] + T.Δ[1]\n                if time[n] > T.tmax \n                    T.Δ[1]  =   T.tmax - time[n-1]\n                    time[n] =   time[n-1] + T.Δ[1]\n                end                \n                # Exact solution on cell centroids\n                AnalyticalSolution2D!(D.Tana, x.c, y.c, time[n], (T0=P.Tamp,K=P.κ,σ=P.σ))\n                # Exact solution on cell boundaries\n                BoundaryConditions2D!(BC, x.c, y.c, time[n], (T0=P.Tamp,K=P.κ,σ=P.σ)) \n            end\n            # Maximum and Mean Temperature with time ---\n            D.Tmax[n]   =   maximum(D.T)\n            D.Tmean[n]  =   mean(D.T)\n            # Vertical Profile along the Center of the Domain ---\n            D.Tprofile[:,n]     .=  (D.T[convert(Int,NC.x/2),:] + \n                                        D.T[convert(Int,NC.x/2)+1,:]) / 2\n            D.Tprofilea[:,n]    .=  (D.Tana[convert(Int,NC.x/2),:] + \n                                        D.Tana[convert(Int,NC.x/2)+1,:]) / 2\n            # Deviation from the Analytical Solution ---\n            @. D.εT     =   (D.Tana - D.T)\n            # RMS ---\n            D.RMS[n]    =   sqrt(sum(D.εT.^2)/(NC.x*NC.y))\n            # Plot Solution ---\n            if mod(n,2) == 0 || n == nt\n                # subplot 1 ---\n                p = heatmap(x.c ./ 1e3, y.c ./ 1e3, (D.T.-P.K0)', \n                    color=:viridis, colorbar=false, aspect_ratio=:equal, \n                    xlabel=\"x [km]\", ylabel=\"z [km]\", \n                    title=\"Temperature\", \n                    xlims=(-P.L/2/1e3, P.L/2/1e3), ylims=(-P.H/2/1e3, P.H/2/1e3), \n                    clims=(minimum(D.T.-P.K0), maximum(D.T.-P.K0)),layout=(2,2),\n                    subplot=1)\n\n                contour!(p,x.c./1e3,y.c/1e3,D.T'.-P.K0,\n                            levels=:5,linecolor=:black,subplot=1)\n                contour!(p,x.c./1e3,y.c/1e3,D.Tana'.-P.K0,\n                            levels=:5,linestyle=:dash,linecolor=:yellow,subplot=1)\n                # subplot 2 ---\n                heatmap!(p,x.c ./ 1e3, y.c ./ 1e3, D.εT', \n                        color=:viridis, colorbar=true, aspect_ratio=:equal, \n                        xlabel=\"x [km]\", ylabel=\"z [km]\", \n                        title=\"Deviation\", \n                        xlims=(-P.L/2/1e3, P.L/2/1e3), ylims=(-P.H/2/1e3, P.H/2/1e3), \n                        clims=(-1,1),\n                        subplot=2)\n                # subplot 3 ---\n                plot!(p,D.Tprofile[:,n],y.c./1e3,\n                    linecolor=:black, ylim=(-P.H/2/1e3,P.H/2/1e3),\n                    xlim=(0,P.Tamp),\n                    xlabel=\"T_{x=L/2} [°C]\",ylabel=\"Depth [km]\",\n                    label=\"\",\n                    subplot=3)\n                plot!(p,D.Tprofilea[:,n],y.c./1e3,\n                    linestyle=:dash,linecolor=:yellow,\n                    xlabel=\"T_{x=L/2} [°C]\",ylabel=\"Depth [km]\",\n                    label=\"\",\n                    subplot=3)\n                # subplot 4 ---\n                plot!(p,time[1:n]./T.year./1e6,D.RMS[1:n],\n                    label=\"\",\n                    xlabel=\"Time [ Myrs ]\",ylabel=\"RMS\",\n                    subplot=4)\n                if save_fig == 1\n                    Plots.frame(anim)\n                elseif save_fig == 0\n                    display(p)                        \n                end\n            end\n            # End Time Loop ---\n        end        \n        display(\"Time loop finished ...\")\n        display(\"-> Use new grid size...\")","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"Now, one can save the plots in a gif animation and store the values for the resolution test. ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"        # Save Animation ---\n        if save_fig == 1\n            # Write the frames to a GIF file\n            Plots.gif(anim, string( path, filename, \".gif\" ), fps = 15)\n        elseif save_fig == 0\n            display(plot(p))\n        end\n        foreach(rm, filter(startswith(string(path,\"00\")), readdir(path,join=true)))\n        # ------------------------------------------------------------ #\n        # Statistical Values for Each Scheme and Resolution ---\n        St.ε[m,l]       =   maximum(D.RMS[:])\n        St.nxny[m,l]    =   1/NC.x/NC.y\n        St.Tmax[m,l]    =   D.Tmax[nt]\n        St.Tmean[m,l]   =   D.Tmean[nt]\n        St.Tanamax[1]   =   maximum(D.Tana)\n        St.Tmean[1]     =   mean(D.Tana)\n        # ------------------------------------------------------------ #\n    end\nend","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"(Image: GD2D_Evolve_example)","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"Figure 2. Final animation using the Crank-Nicolson approach for a resolution of 100 x 100. Top left: Numerical solution of the transient temperature field (background colored field and black contours); yellow dashed contours - analytical solution. Top right: Absolut deviation of the numerical from the analytical solution. Bottom left: Vertical temperature profile along the middle of the domain. Bottom right: RMS over time. ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"Finally, the results of the resolution test are plotted. ","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"# Visualize Statistical Values --------------------------------------- #\nq   =   plot(0,0,layout=(1,3))\nfor m = 1:ns\n#    subplot(1,3,1)\n    plot!(q,St.nxny[m,:],St.ε[m,:],\n                marker=:circle,markersize=3,label=Schema[m],\n                xaxis=:log,yaxis=:log,\n                xlabel=\"1/nx/ny\",ylabel=\"ε_{T}\",layout=(1,3),\n                subplot=1)\n    plot!(q,St.nxny[m,:],St.Tmax[m,:],\n                marker=:circle,markersize=3,label=\"\",\n                xaxis=:log,\n                xlabel=\"1/nx/ny\",ylabel=\"T_{max}\",\n                subplot=2)\n    plot!(q,St.nxny[m,:],St.Tmean[m,:],\n                marker=:circle,markersize=3,label=\"\",\n                xaxis=:log,\n                xlabel=\"1/nx/ny\",ylabel=\"⟨T⟩\",\n                subplot=3)\n    display(q)\nend\n# --------------------------------------------------------------------- #\n# Save Final Figure --------------------------------------------------- #\nif save_fig == -1\n    savefig(q,\"./examples/DiffusionEquation/2D/Results/Gaussian_ResTest.png\")\nend\n# --------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/GaussianDiffusion2D/","page":"Gaussian Diffusion (2D)","title":"Gaussian Diffusion (2D)","text":"(Image: GD_Rest_test)","category":"page"},{"location":"man/listoffunctions/#List-of-all-functions","page":"List of functions","title":"List of all functions","text":"","category":"section"},{"location":"man/listoffunctions/","page":"List of functions","title":"List of functions","text":"Here an overview of all functions:","category":"page"},{"location":"man/examples/OceanicGeotherm/#[Oceanic-Geotherm](https://github.com/GeoSci-FFM/GeoModBox.jl/blob/main/examples/DiffusionEquation/1D/OceanicGeotherm_1D.jl)","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm","text":"","category":"section"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"The 1-D temperature profile of an oceanic geotherm can be calculated by solving the conductive part of the 1-D temperature conservation equation using variable thermal parameters with a proper conserving finite difference scheme (so far only including a radiogenic heat source). For the sake of continuity, we use the 1-D solver for variable thermal parameters, even though, we assume a constant thermal conductivity in this example.","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"A proper conservative finite difference scheme in 1-D means that the temperature is defined on the centroids and the vertical heat flux q_y and the thermal conductivity k on the vertices.","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"The 1-D temperature equation is given by: ","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"beginequation\nrho c_p fracpartialTpartialt = fracpartialq_ypartialy + rho H\nendequation","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"where the heat flux is defined as:","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"beginequation\nleft q_ym = -k_m fracpartial Tpartial yrightvert_m textrmfor m = 1nv \nendequation","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"with rho c_p T t k H y and nv are the density [kg/m³], the specific heat capacity [J/kg/K], the temperature [K], the time [s], the thermal conductivity [W/m/K], the heat generation rate per mass [W/kg], the depth [m], and the number of vertices, respectively. ","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"For more details on how to discretize the equation using an explicit, forward Euler finite difference scheme, please see the documentation.","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"Let's start with the definition of the geometrical, numerical, and physical constants: ","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"# Constants --------------------------------------------------------- #\nH           =   200e3               #   Hight of the model [ m ]\nnc          =   200                 #   Number of central grid points    \nΔy          =   H/nc                #   Grid resolution\n\n# Depth ---\nyc          =   LinRange(-H + Δy/2.0,0.0 - Δy/2.0,nc)     \nyv          =   LinRange(-H,0,nc+1)\n    \nPy  =   (\n    ρm      =   3000,               #   Density [ kg/m^3 ]\n    cpm     =   1000,               #   Heat capacity [ J/kg/K ]\n    km      =   3.0,                #   Conductivity [ W/m/K ]\n    HM      =   0,                  #   Heat generation rate [W/kg]; Q = ρ*H0\n)    \n# ------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"In the following, one needs to define the initial and boundary condition: ","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"Temperature at the surface and bottom.\nLinear increasing temperature profile assuming a certain adiabatic gradient and potential mantle temperature.","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"# Initial Condition ------------------------------------------------- #\nT   =   (\n    Tpot    =   1315 + 273.15,      #   Potential temperautre [ K ]\n    ΔTadi   =   0.5,                #   Adiabatic temperature gradient [ K/km ]\n    Ttop    =   273.15,             #   Surface temperature [ K ]\n    T_ex    =   zeros(nc+2,1),    \n)\nT1  =   (\n    Tbot    =   T.Tpot + T.ΔTadi*abs(H/1e3),    # Bottom temperature [ K ]\n    T       =   T.Tpot .+ abs.(yc./1e3).*T.ΔTadi,   # Initial T-profile [ K ]\n)\nT   =   merge(T,T1)\n     \nTini                =   zeros(nc,1)\nTini                .=   T.T\nT.T_ex[2:end-1]     .=   T.T\n# ------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"One can choose between Dirichlet or Neumann thermal boundary conditions at the surface and bottom. ","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"# Boundary conditions ----------------------------------------------- #\nBC      =   (\n    type    = (N=:Dirichlet, S=:Dirichlet),\n    val     = (N=T.Ttop[1],S=T.Tbot[1])\n)\n# If Neumann boundary conditions are choosen, the following values result in the given heatflux for the given thermal conductivity k. \n# S      =   -0.03;          # c     =   -k/q -> 90 mW/m^2\n# N      =   -0.0033;        # c     =   -k/q -> 10 mW/m^2\n# ------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"Now, one needs to define the multiplication factor fac of the diffusion stability criterion for the explicit thermal solver. This factor controls the stability criterion. If it is larger then 1 the solver becomes instable.  ","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"# Time stability criterion ------------------------------------------ #\nfac     =   0.8                 #   Courant criterion\ntmax    =   60                  #   Lithosphere age [ Ma ]\ntsca    =   60*60*24*365.25     #   Seconds per year\n\nage     =   tmax*1e6*tsca        #   Age in seconds    \n# ------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"Let's check that the initial and boundary conditions are properly defined by plotting the temperature profile. ","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"# Plot Initial condition -------------------------------------------- #\nplotparam   =   1\nq = plot(Tini,yc./1e3, \n    label=\"\", \n    xlabel=\"T [ K ]\", ylabel=\"z [ km ]\", \n    title=\"Initial Temperature\",\n    xlim=(T.Ttop,T.Tbot),ylim=(-H/1e3,0))\ndisplay(q)\n# ------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"(Image: OG1D_ini)","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"Figure 1. Initial temperature profile.","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"Since a thermal solver for variable thermal parameters is used, one needs to expand the scalar to a vector with the dimensions of the number of centroids nc. Additionally, the thermal diffusivity kappa and initialize the vertical heat flux q need to be defined. ","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"# Setup Fields ------------------------------------------------------ #\nPy1     =   (\n    ρ       =   Py.ρm.*ones(nc,1),\n    cp      =   Py.cpm.*ones(nc,1),\n    k       =   Py.km.*ones(nc+1,1),\n    H       =   Py.HM.*ones(nc,1)\n)\nPy  =   merge(Py,Py1)\nPy2     =   (\n    # Thermal diffusivity [ m^2/s ] \n    κ       =  maximum(Py.k)/minimum(Py.ρ)/minimum(Py.cp),     \n)\nPy  =   merge(Py,Py2)\nT2  =   (\n    q   =   zeros(nc+1,1),\n)\nT   =   merge(T,T2)\n# ------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"Now, one can calculate the time stability criterion. ","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"# Time stability criterion ------------------------------------------ #\nΔtexp   =   Δy^2/2/Py.κ             #   Stability criterion for explicit\nΔt      =   fac*Δtexp               #   total time step\n\nnit     =   ceil(Int64,age/Δt)      #   Number of iterations    \n\ntime    =   zeros(1,nit)            #   Time array\n# ------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"Now all required parameter and constants are defined to solve the 1-D temperature equation for each time step in a for loop. ","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"The temperature conservation equation is solved via the function ForwardEuler1D!(), which updates the temperature profile T.T for each time step using the extended temperautre field T.T_ex, which include the ghost nodes. The temperature profile is plotted for a certain time.  ","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"# Calculate 1-D temperature profile --------------------------------- #\ncount   =   1\nfor i = 1:nit\n    if i > 1\n        time[i]     =   time[i-1] + Δt\n    elseif time[i] > age\n        Δt          =   age - time[i-1]\n        time[i]     =   time[i-1] + Δt\n    end\n    ForwardEuler1D!(T,Py,Δt,Δy,nc,BC)\n    if i == nit || abs(time[i]/1e6/tsca - count*5.0) < Δt/1e6/tsca        \n        println(string(\"i = \",i,\", time = \", time[i]/1e6/tsca))        \n        q = plot!(T.T,yc./1e3, \n            label=string(\"t = \",ceil(time[i]/1e6/tsca),\"[Ma]\"), \n            xlabel=\"T [ K ]\", ylabel=\"z [ km ]\", \n            title=\"Oceanic Geotherm\",\n            xlim=(T.Ttop,T.Tbot),ylim=(-H/1e3,0))\n        display(q)\n        count = count + 1\n    end\nend\n# ------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"(Image: OG1D_evolve)","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"Figure 2. Evolution of the temperature profile with depth in 5 Ma steps.","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"For the final time step, a depth profile for the vertical heat flux is calculated. Therefore, one needs to update the temperature at the ghost nodes to calculate the heat flux at the boundary. ","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"# Calculate heaf flow ----------------------------------------------- #\n# South ---\nT.T_ex[1]   =   (BC.type.S==:Dirichlet) * (2 * BC.val.S - T.T_ex[2]) + \n                (BC.type.S==:Neumann) * (T.T_ex[2] - BC.val.S*Δy)\n# North ---\nT.T_ex[end] =   (BC.type.N==:Dirichlet) * (2 * BC.val.N - T.T_ex[nc+1]) +\n                (BC.type.N==:Neumann) * (T.T_ex[nc+1] + BC.val.N*Δy)\nfor j=1:nc+1\n    T.q[j]  =   -Py.k[j] * \n        (T.T_ex[j+1] - T.T_ex[j])/Δy\nend\n# ------------------------------------------------------------------- #","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"Finally, one can caluclate the temperature profile for an oceanic geotherm using the analytical expression of an infinite half-space cooling model for a certain age. The analytical solution is plotted in the final figure, together with the final numerical temperature profile and the heat flux profile. ","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"# Plot -------------------------------------------------------------- #\nif BC.type.N==:Dirichlet && BC.type.S==:Dirichlet\n    Tana    =   zeros(nc,1)\n    Tana    .=   Tini .+ (T.Ttop - T.Tpot).*erfc.(-yc./(2*sqrt(age*Py.κ)))\n    Tana[end] =   T.Ttop\nend    \np = plot(T.T,yc./1e3, \n        label=string(\"t = \",ceil(maximum(time)/1e6/tsca),\"[Ma]\"), \n        xlabel=\"T [ K ]\", ylabel=\"z [ km ]\",\n        title=\"Oceanic Geotherm\",\n        xlim=(T.Ttop,T.Tbot),ylim=(-H/1e3,0),\n        layout=(1,2),subplot=1)        \nif BC.type.N==:Dirichlet && BC.type.S==:Dirichlet\n    plot!(p,Tana,yc./1e3, \n            label=\"T_HSCM\",linestyle=:dash,\n            layout=(1,2),subplot=1)        \nend        \np = plot!(T.q.*1e3,yv./1e3, \n        label=\"\", \n        xlabel=\"q [ mW ]\", ylabel=\"z [m]\", \n        title=\"Heat Flux\",\n        ylim=(-H/1e3,0),\n        subplot=2)        \ndisplay(p)\nsavefig(p,\"./examples/DiffusionEquation/1D/Results/OceanicGeotherm_1D.png\")\nsavefig(q,\"./examples/DiffusionEquation/1D/Results/OceanicGeotherm_1D_evolve.png\")\n# ======================================================================= #","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"(Image: OG1D_final)","category":"page"},{"location":"man/examples/OceanicGeotherm/","page":"Oceanic Geotherm (1D)","title":"Oceanic Geotherm (1D)","text":"Figure 3. Final temperature and heat flux profiles.","category":"page"},{"location":"man/MomentumMain/#Momentum-Equation","page":"General","title":"Momentum Equation","text":"","category":"section"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"On geological time scales, Earth's mantle and lithosphere behave like a fluid that moves and deforms in response to forces. In general, three major force types influence fluid motion: inertial, surface, and body (volumetric) forces. A commonly used expression to describe such motion is:","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"beginequation\nrho fracD v_iDt = fracpartialsigma_ijpartialx_j + rho g_i\nendequation","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"where  rho is the density [kg/m³],  v_i is the velocity component [m/s] in direction i,  sigma_ij is the Cauchy stress tensor [Pa],  g_i is the gravitational acceleration [m/s²] in direction i, and  fracDDt is the Lagrangian (material) time derivative, expressed in Eulerian form as: ","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"beginequation\nfracDDt = fracpartialpartialt + v_jfracpartialpartialx_j\nendequation","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"The Cauchy stress tensor is commonly decomposed as:","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"beginequation\nsigma_ij = -fracpartialPpartialx_i + fracpartialtau_ijpartialx_j\nendequation","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"where P is the total pressure (including dynamic and hydrostatic components), and tau_ij is the deviatoric stress tensor.","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"Substituting into the momentum equation and expanding the material derivative yields the Navier–Stokes equation in Eulerian form:","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"beginequation\nrho left(fracpartialv_ipartialt + v_jfracpartialv_ipartialx_jright) = -fracpartialPpartialx_i + fracpartialtau_ijpartialx_j + rho g_i\nendequation","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"with Einstein summation implied over repeated indices.","category":"page"},{"location":"man/MomentumMain/#Constitutive-Relation","page":"General","title":"Constitutive Relation","text":"","category":"section"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"To solve the momentum equation, we must define the rheology of the material. For a purely viscous fluid, the deviatoric stress is related to the strain rate by:","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"beginequation\ntau_ij = 2 eta cdot dotvarepsilon_ij\nendequation","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"where  eta is the dynamic viscosity [Pa·s] and  dotvarepsilon_ij the strain rate tensor [1/s], given by: ","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"beginequation\ndotvarepsilon_ij = frac12 left(fracpartialv_ipartialx_j + fracpartialv_jpartialx_iright)\nendequation","category":"page"},{"location":"man/MomentumMain/#Stokes-Equation","page":"General","title":"Stokes Equation","text":"","category":"section"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"In the mantle, inertial forces are typically negligible compared to viscous and gravitational forces. Under this Stokes flow approximation, the momentum equation simplifies to:","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"beginequation\n0 = -fracpartialPpartialx_i + fractau_ijpartialx_j + rho g_i\nendequation","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"Using the constitutive relation, we obtain:","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"beginequation\n0 = -fracpartialPpartialx_i + fracpartialpartialx_j eta left(fracpartialv_ipartialx_j + fracpartialv_jpartialx_iright) + rho g_i\nendequation","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"Assuming constant viscosity simplifies this further to:","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"beginequation\n0 = -fracpartialPpartialx_i + eta left(fracpartial^2v_ipartialx_j^2 + fracpartial^2v_jpartialx_i^2right) + rho g_i\nendequation","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"Solving this system requires discretization of both the x- and y-components of the momentum equation, as well as the mass conservation equation. For implementation details, refer to the 1D and 2D momentum equation documentation.","category":"page"},{"location":"man/MomentumMain/#Continuum-Equation","page":"General","title":"Continuum Equation","text":"","category":"section"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"The Stokes system provides two equations for the three unknowns v_x, v_y, and P. To close the system, we use the continuity equation. Assuming an incompressible fluid (Boussinesq approximation), the mass conservation equation becomes:","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"beginequation\nfracpartialv_ipartialx_i = 0\nendequation","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"Together, the momentum and continuity equations allow solving for v_x, v_y, and P.","category":"page"},{"location":"man/MomentumMain/#Examples","page":"General","title":"Examples","text":"","category":"section"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"The following examples demonstrate the application of the Stokes equations:","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"1D channel flow with constant and depth-dependent viscosity  \n2D falling block benchmark  \n2D falling block with constant viscosity (defect correction)  \n2D falling block with variable viscosity (defect correction)  \n2D viscous inclusion problem  \n2D Rayleigh–Taylor instability benchmark","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"Examples of coupled temperature–momentum systems (i.e., convection models) using operator splitting include:","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"Mixed heated convection models","category":"page"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"See the examples documentation for further details.","category":"page"},{"location":"man/MomentumMain/#Exercises","page":"General","title":"Exercises","text":"","category":"section"},{"location":"man/MomentumMain/","page":"General","title":"General","text":"Steady-state, isoviscous 2D falling block  \nTime-dependent, isoviscous 2D falling block\n2D thermal convection (isoviscous)  \nScaled 2D thermal convection  \nBlankenbach benchmark with resolution study","category":"page"},{"location":"man/Examples/#Examples-and-Benchmarks","page":"Examples and Benchmarks","title":"Examples and Benchmarks","text":"","category":"section"},{"location":"man/Examples/","page":"Examples and Benchmarks","title":"Examples and Benchmarks","text":"In the following, one can find different examples and benchmarks in 1-D and 2-D for each of the governing equations. The examples highlight how to implement the different solvers, how to utilize the scaling, and advantages and disadvantages of each finite difference scheme. ","category":"page"},{"location":"man/Examples/","page":"Examples and Benchmarks","title":"Examples and Benchmarks","text":"By clicking on the title of each page one is directly directed to the julia example file within the example directory","category":"page"},{"location":"man/Examples/","page":"Examples and Benchmarks","title":"Examples and Benchmarks","text":"Note: Within GeoModBox.jl the thermal and kinematic boundary conditions are explicitly implemented in the solvers, where the absolute values for the ghost nodes are calculated depending on the values given in the tuple BC. Within the tuple, we define the type (Dirichlet or Neumann) and the corresponding value at each boundary. ","category":"page"},{"location":"man/Examples/","page":"Examples and Benchmarks","title":"Examples and Benchmarks","text":"Note: Usually, the results of each example within the GeoModBox.jl are stored in gif animations (if it is a time-dependent problem). If one wants to plot the solution for certain time steps the parameter save_fig needs to be set to 0. This setting does not result in the generation of a gif file and the single plots are not saved! Thus, care needs to be taken if the problem needs multiple time step iterations. ","category":"page"},{"location":"man/Examples/","page":"Examples and Benchmarks","title":"Examples and Benchmarks","text":"Note: Some examples use named tuples to define the different constants and variables. Alternatively, mutable structures can also be used to define those parameters in the GeoModBox.jl. The mutable structure are especially benificial, if one needs to edit the parameters after the have been defined, e.g., for scaling. ","category":"page"},{"location":"man/AdvOneD/#Advection-Equation-(1D)","page":"1D","title":"Advection Equation (1D)","text":"","category":"section"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"In one dimension, the advection equation for the temperature conservation, for example, is given as follows","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"beginequation\nfracpartialTpartialt = -v_x left(fracpartialTpartialxright)\nendequation","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"where T is the temperature [K], t is the time [s], and v_x is the velocity in the x-direction. ","category":"page"},{"location":"man/AdvOneD/#Discretization-Schemes","page":"1D","title":"Discretization Schemes","text":"","category":"section"},{"location":"man/AdvOneD/#Forward-in-Time-and-Centered-in-Space-(FTCS)","page":"1D","title":"Forward in Time and Centered in Space (FTCS)","text":"","category":"section"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"Let's begin with the seemingly simplest approach. Approximating the partial derivatives using a FTCS scheme results in","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"beginequation\nfracT_i^n+1-T_i^nDeltat = -v_xleft(fracT_i+1^n-T_i-1^n2Deltaxright)\nendequation","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"where Deltat and Deltax are the time step and grid resolution, respectively, and i and n denote the spatial and temporal indices. This scheme is first-order accurate in time and second-order accurate in space. ","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"Rearranging gives the solution for the temperature at the next time step:","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"beginequation\nT_i^n+1 = T_i^n - v_x DeltatfracT_i+1^n - T_i-1^n2Deltax\nendequation","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"The right-hand side can be simplified using the so-called Courant number:","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"beginequation\nalpha = fracv_xDeltatDeltax\nendequation","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"which represents the number of grid points traversed in a single time step. ","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"Unfortunately, this scheme is unconditionally unstable for the advection equation, as shown by a Von Neumann or Hirt's stability analysis. Furthermore, the central difference at i causes amplification of the variable (here, temperature) at each subsequent time step. Hence, the solution continually grows and is unstable.","category":"page"},{"location":"man/AdvOneD/#Lax-Friedrichs-method","page":"1D","title":"Lax-Friedrichs method","text":"","category":"section"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"One way to suppress the instability of the FTCS scheme is the Lax-Friedrichs method. This replaces the term T_i^n with its spatial average at the same time level, resulting in:","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"beginequation\nfracT_i^n+1-left(T_i+1^n+T_i-1^nright)2Deltat=-v_xfracT_i+1^n-T_i-1^n2Deltax\nendequation","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"Rearanging gives:","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"beginequation\nT_i^n+1 = frac12left(T_i+1^n+T_i-1^nright)-\nfracv_x Deltat2Deltax left(T_i+1^n-T_i-1^nright)\nendequation","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"This method is stable for alpha  1 but introduces significant numerical diffusion.","category":"page"},{"location":"man/AdvOneD/#Upwind","page":"1D","title":"Upwind","text":"","category":"section"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"Another approach is to consider only upstream information. The upwind scheme uses one-sided finite differences, always taken in the upstream direction. This results in a scheme that is first-order accurate in both space and time. The discretized advection equation becomes:","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"beginequation\nfracT_i^n+1-T_i^nDeltat = -v_xi\nbegincases\nfracT_i^n-T_i-1^nDeltax textif  v_xi gt 0\nfracT_i+1^n-T_i^nDeltaxtextif  v_xi lt 0 \nendcases\nendequation","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"The scheme is stable if the Courant criterion is satisfied (alpha le 1), but numerical diffusion remains, which depends on the grid size. A Taylor series expansion shows that, in 1D with constant velocity, the scheme becomes non-diffusive if the time step exactly satisfies the Courant criterion. The method becomes unstable if this criterion is violated.","category":"page"},{"location":"man/AdvOneD/#Staggered-Leapfrog","page":"1D","title":"Staggered Leapfrog","text":"","category":"section"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"All previously discussed explicit schemes are only first-order accurate in time and second-order in space (except upwind, which is first-order in both). To match the temporal and spatial accuracy without choosing a very small time step, one may use the staggered leapfrog scheme:","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"beginequation\nfracT_i^n+1-T_i^n-12Deltat=-v_xfracT_i+1^n-T_i-1^n2Deltax\nendequation","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"This method avoids numerical diffusion, but becomes increasingly unstable when strong gradients in the advected field are present.","category":"page"},{"location":"man/AdvOneD/#Semi-Lagrangian","page":"1D","title":"Semi-Lagrangian","text":"","category":"section"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"The methods discussed above each have drawbacks. The semi-Lagrangian method addresses several of them: it is stable, does not suffer from numerical diffusion, and is not constrained by the Courant criterion. It is related to tracer-based advection schemes and solves ODEs rather than using traditional finite differences. While not inherently conservative and subject to minor interpolation errors, it offers promising accuracy and efficiency.","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"The central idea is to trace an advected particle backward in time to its origin and interpolate the corresponding value from the Eulerian grid.","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"In 1D, assuming constant velocity in time and space, the procedure is:","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"1. Calculate the initial position ","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"The initial position X_i of a particle landing on the Eulerian grid point x_i at time t_n+1 is:","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"beginequation\nX_i=x_i-Deltatcdot v_xleft(t_n+1x_iright)\nendequation","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"where x_i is the coordinate of the Eulerian grid point i, Deltat is the time step, v_x the velocity in x-direction, and t_n+1 is the time at the new time step. ","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"2. Interpolate the temperature","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"Interpolate the temperature at t_n from the surrounding Eulerian grid points onto the position X_i, e.g., using cubic_spline_interpolation().","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"3. Update the Temperature field","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"Assuming the temperature at the grid point at t_n+1 equals the interpolated value at X_i at time t_n:","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"beginequation\nTleft(t_n+1x_iright) = Tleft(t_nX_iright)\nendequation","category":"page"},{"location":"man/AdvOneD/#Passive-tracers","page":"1D","title":"Passive tracers","text":"","category":"section"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"Using passive tracers represents a fully Lagrangian method. Initially distributed tracers (or markers) are transported by the prescribed velocity field. Tracers can carry various attributes, and if these influence the model’s rheology or dynamics, they are considered active tracers, requiring velocity correction.","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"To transport a property with tracers:","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"1. Define tracers vecx_p with initial positions vecx_pleft(t=0right) and initial property values fleft(vecx_pleft(t=0right)right).","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"2. Compute flow paths by solving the ODE of particle motion, for instance using Forward Euler or Runge-Kutta integration.","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"In 1D, the path equation is:","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"beginequation\nfracdx_pdt=v_x left(x_ptright)\nendequation","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"where x_p is the x-coordinate of the tracer. ","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"Forward Euler","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"The flow path ODE is approximated as:","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"beginequation\nfracx_p^n+1-x_p^nDeltat = v_x(x_p^n) \nendequation","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"Solving for the next position:","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"beginequation\nx_p^n+1 = x_p^n + Deltatcdot v_x(x_p^n) \nendequation","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"While simple, this method suffers from inaccuracy for large Deltat and v_x.","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"Runge-Kutta 4-th order","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"A more accurate method is the 4th-order Runge-Kutta. In 1D, the next position is:","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"beginequation\nx_p^n+1 = x_p^n + frac16k_1 + frac13k_2 + frac13k_3 + frac16k_4\nendequation","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"where:","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"beginequation\nbeginsplit\nk_1  = Deltat cdot v_x(t^nx_p^n) \nk_2  = Deltat cdot v_x(t^n+Deltat2x_p^n+k_12) \nk_3  = Deltat cdot v_x(t^n+Deltat2x_p^n + k_22) \nk_4  = Deltat cdot v_x(t^n+Deltatx_p^n+k_3) \nendsplit\nendequation","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"3. Interpolate grid values of f(xt) from the tracer positions vecx_p, e.g., using bilinear interpolation.","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"Despite the advantages, care is required. Interpolation between grid and tracer data can cause smoothing and numerical diffusion, particularly in regions with sharp gradients. Additionally, clustering or depletion of tracers can introduce further errors and may require adaptive insertion of new tracers in under-sampled regions.","category":"page"},{"location":"man/AdvOneD/#Exercise","page":"1D","title":"Exercise","text":"","category":"section"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"All the above methods are implemented in the 1D advection exercise:","category":"page"},{"location":"man/AdvOneD/","page":"1D","title":"1D","text":"1-D Gaussian or block anomaly advection  ","category":"page"},{"location":"#GeoModBox.jl","page":"Home","title":"GeoModBox.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Geodynamic Modelling ToolBox is a julia package mainly used for teaching purposes. The package provides different finite difference, staggered, discretization schemes to numerically solve the governing equations for a two-dimensional geodynamic problem. The governing equations are the conservation equations of ","category":"page"},{"location":"","page":"Home","title":"Home","text":"energy, \nmomentum, \nmass and compositon. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The GeoModBox.jl includes a series of exercises and examples of different geodynamically well defined problems. The exercises are given as Jupyter notebooks for the students to complete. The theoretical background is mainly given here in the documentation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The solvers for each governing equation can be used seperately or in combination for dimensional or non-dimensional problems with only minimal modifications when calling the functions. Some typical initial conditions, like a linear increasing temperature, are predifined and can be called. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"For more details on how this is implemented please see this documentation.","category":"page"},{"location":"#Staggered-Finite-Difference","page":"Home","title":"Staggered Finite Difference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To properly solve the governing equations, a staggered finite difference scheme is choosen for the energy and momentum equations. A staggered grid enables a correct, straight forward implementation of certain boundary conditions and enables the conservation of stress between the nodes in case of a variable viscosity. This also requires that certain parameters are defined on different grids. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here, the temperature, density, pressure are defined on the centroids, ... are defined on the vertices, the velocities are defined in between the vertices, and the viscosity is needed on both. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"For more details on how this is used in the GeoModBox.jl see here.","category":"page"},{"location":"#Energy-Conservation-Equation","page":"Home","title":"Energy Conservation Equation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In geodynamics, the energy is described by the temperature and needs to be conserved within a closed system. Here, we solve the temperature conservation equation, or temperature equation, using an operator splitting method, that is, we first solve the advective part of the temperature equation, followed by the diffusive part. ","category":"page"},{"location":"#[Heat-Diffusion-Equation](./man/DiffMain.md)","page":"Home","title":"Heat Diffusion Equation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The GeoModBox.jl provides different finite difference (FD) schemes to solve the diffusive part of the time-dependent or steady-state temperature equation including radioactive heating, in 1-D and 2-D. The solvers are located in src/HeatEquation. So far, only Dirichlet and Neumann thermal boundary conditions are available. Most of the functions assume constant thermal parameters (except for the 1-D solvers and the 2-D defect correction solver). ","category":"page"},{"location":"#[Heat-Advection-Equation](./man/AdvectMain.md)","page":"Home","title":"Heat Advection Equation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The GeoModBox.jl provides different methods to advect certain properties within the model domain. The corresponding routines are structured in such a way, that any property can be advected with the described advection solvers, as long as the property is defined on the centroids including ghost nodes at all boundaries. Using passive tracers, one can, so far, choose to either advect the absolute temperature or the phase ID. ","category":"page"},{"location":"#[Momentum-Conservation-Equation](./man/MomentumMain.md)","page":"Home","title":"Momentum Conservation Equation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"On a geological time scale, Earth's mantle and the lithosphere creep slowly due to its high viscosity and one can neglect the inertial forces. This simplifie the Navier-Stokes equation and one obtains the so called Stokes equation. The GeoModBox.jl provides mainly two different methods, the direct method and the defect correction method, to solve the Stokes equation in 1-D and 2-D assuming both a constant and variable viscosity field. The velocity and the pressure are thereby defined on a staggered grid and ghost nodes are also defined to properly implement free slip and no slip boundary condtions. ","category":"page"},{"location":"#[Benchmarks-and-Examples](https://github.com/GeoSci-FFM/GeoModBox.jl/blob/main/examples/)","page":"Home","title":"Benchmarks and Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here are the resulting visualizations of some of the examples provided by the GeoModBox.jl. For more details on the examples, please refer to the individual documentation of the examples. The title of each example is linked to the source code of the example. ","category":"page"},{"location":"#[Gaussian-Temperature-Diffusion](https://github.com/GeoSci-FFM/GeoModBox.jl/blob/main/examples/DiffusionEquation/2D/Gaussian_Diffusion.jl)","page":"Home","title":"Gaussian Temperature Diffusion","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: GaussianDiffusion)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Figure 1. Gaussian Diffusion. Time-dependent, diffusive solution of a 2-D Gaussian temperature anomaly for a resolution of 100 x 100 using the Crank-Nicholson approach in comparison to its analytical solution. Top Left: 2-D temperature field of the numerical solution and isotherms lines of the numerical (solid black) and analytical (dashed yellow) solution. Top Right: Total deviation to the analytical solution. Bottom Left: 1-D y-profile along x=0. Bottom Right: Root Mean Square total devation of the temperature over time. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: GDResTest)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Figure 2. Resolution test. Maximum RMS varepsilon, maximum, and mean temperature for each FD-scheme and multiple resolutions. ","category":"page"},{"location":"#[Rigid-Body-Rotation](https://github.com/GeoSci-FFM/GeoModBox.jl/blob/main/examples/AdvectionEquation/2D_Advection.jl)","page":"Home","title":"Rigid-Body-Rotation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: RigidBodyI)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: RigidBodyII)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: RigidBodyIII)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Figure 3. Rigid-Body-Rotation. Time-dependent solution of a rotating circular temperature anomaly using the upwind (first), semi-lagrangian (second), and tracer (third) method for a resolution of 100 x 100. Within a circular area of our model domain the velocity is set to the velocity of a rigid rotation and outside euqal to zero. The temperature is scaled by the maximum temperature of the anomaly. ","category":"page"},{"location":"#[Falling-Block](https://github.com/GeoSci-FFM/GeoModBox.jl/blob/main/examples/StokesEquation/2D/FallingBlockBenchmark.jl)","page":"Home","title":"Falling Block","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: FallingBlockTD)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Figure 4. Isoviscous Falling Block. Time-dependent solution of an isoviscous falling block example for a resolution of 50 x 50 and 9 tracers per cell. The problem is solved with a solver for variable viscosities. The tracers advect the phase ID, which is used to interpolate the density and viscosity on the centroids and vertices, respectively. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: FBSinkinVeloc)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Figure 5. Falling Block Sinking Velocity. Sinking velocity of the block with respect to the viscosity ratio eta_r at the initial condition. Same setup as in the previous figure. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: FBFinalStage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Figure 6. Falling Block Benchmark. Final tracers distribution for specific cases with \\eta_r \\ge 0 $. ","category":"page"},{"location":"#[Thermal-Convection](https://github.com/GeoSci-FFM/GeoModBox.jl/blob/main/examples/MixedHeatedConvection)","page":"Home","title":"Thermal Convection","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: BHTC)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Figure 7. Bottom Heated, isoviscous Convection for Ra = 10^6 and a resolution of 400 x 100. TOP: Transient behavior of the temperature overlain with the velocity field vectors. BOTTOM: Horizonatlly averaged temperature-depth profiles for each time step. The model is solved using the defect correction method for the momentum equation, semi-lagrangian advection scheme, and Crank-Nicolson approach for the heat diffusion. The thermal boundary conditions are Dirichlet at the top and bottom and Neumann at the sides. The velocity boundary conditions are free slip along all sides. For more details see the example documentations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: IHTC)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Figure 8. Internally Heated, isoviscous Convection for Ra_Q = 15 cdot 10^6 and a resolution of 400 x 100. The model parameters are the same as in the previous example, except for Neumann boundary conditions at the bottom (zero heat flux) and a constant internal, volumetric heat production rate of Q approx 15.  Same solvers, boundary, and initial condition used as in the previous figure. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: MHTC)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Figure 9. Mixed Heated, isoviscous Convection for Ra =  and a resolution of 400 x 100. Same solvers, boundary, and initial condition used as in the previous figure.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"man/AdvectMain/#Advection-Equation","page":"General","title":"Advection Equation","text":"","category":"section"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"In cases where the material remains stationary (e.g., during the thermal evolution of intrusions or within a non-deforming lithosphere), it is sufficient to solve only the diffusive term of the energy equation. However, in most geodynamical contexts, material is in motion, and physical properties such as temperature, density, or composition must be advected with the flow.","category":"page"},{"location":"man/AdvectMain/#Eulerian-and-Lagrangian-Formulations","page":"General","title":"Eulerian and Lagrangian Formulations","text":"","category":"section"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"Advection describes the transport of scalar or vector quantities due to the motion of a fluid. Depending on the reference frame, the governing equations take different forms.","category":"page"},{"location":"man/AdvectMain/#Eulerian-Formulation","page":"General","title":"Eulerian Formulation","text":"","category":"section"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"In a fixed (Eulerian) reference frame, the local rate of change of temperature, for example, is governed by the advection equation:","category":"page"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"beginequation\nfracpartial Tpartial t = - vecv cdot nablaT\nendequation","category":"page"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"where vecv is the velocity vector and T is the temperature field. Eulerian formulations are solved on a fixed grid using schemes that aim to balance accuracy, stability, and computational efficiency. GeoModBox.jl supports several such schemes appropriate for a range of applications.","category":"page"},{"location":"man/AdvectMain/#Lagrangian-Formulation","page":"General","title":"Lagrangian Formulation","text":"","category":"section"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"In a moving (Lagrangian) reference frame, which follows individual fluid particles, temperature evolution is described by the material (substantial) derivative:","category":"page"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"beginequation\nfracDTDt\nendequation","category":"page"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"which relates to the Eulerian description via:","category":"page"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"beginequation\nfracDTDt = fracpartial Tpartial t + vecv cdot nablaT\nendequation","category":"page"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"In the Lagrangian frame, advection reduces to solving a system of ordinary differential equations (ODEs) for particle trajectories:","category":"page"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"beginequation\nfracDx_iDt = v_i\nendequation","category":"page"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"where x_i are the coordinates and v_i the corresponding velocity components.","category":"page"},{"location":"man/AdvectMain/#Discretization-Schemes","page":"General","title":"Discretization Schemes","text":"","category":"section"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"Although simple in form, the advection equation is challenging to solve numerically. The choice of discretization and interpolation schemes—particularly when coupling grid-based fields with Lagrangian tracers—can introduce numerical artifacts such as diffusion, dispersion, or instability.","category":"page"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"To promote clarity and modularity, GeoModBox.jl employs an operator-splitting strategy. This approach decouples the advective and diffusive terms of the temperature conservation equation and solves them sequentially. First, the advective (convective) term is solved, followed by the diffusive term. The latter is handled using the schemes described in the Diffusion Equation documentation. ","category":"page"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"Note: The energy equation can also be solved for diffusion and advection simultaneously using combined schemes. Interestingly, the Forward in Time and Centered in Space (FTCS) scheme—although unstable for pure advection—can exhibit numerical stability due to diffusion when both processes are active.","category":"page"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"For the advection term, GeoModBox.jl includes the following numerical schemes:","category":"page"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"Upwind  \nLax  \nStaggered leapfrog  \nSemi-Lagrangian  \nPassive tracer/marker method","category":"page"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"The first four schemes work for any scalar field defined at centroids, including ghost nodes, and use centroid-defined velocity fields.","category":"page"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"Passive tracers can be used to advect temperature or phase identifiers. When advecting phase IDs, the tracer data must also include material parameters such as viscosity or density. These values are interpolated either to centroids or to vertices, depending on the quantity (e.g., viscosity at vertices). The tracer or marker-in-cell (MIC) method tracks material properties along particle paths and solves the associated ODE system using standard time integration methods, including:","category":"page"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"Euler method  \nRunge–Kutta methods","category":"page"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"The GeoModBox.jl focuses on the tracer advection using a fourth-order Runge–Kutta method, with velocities from the staggered grid.","category":"page"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"An important consideration in advection is the preservation of amplitude and shape, especially in problems involving rigid body rotation. Numerical diffusion and interpolation artifacts can significantly affect the solution quality depending on the chosen scheme, making the selection of an appropriate method crucial.","category":"page"},{"location":"man/AdvectMain/#Advection-Stability-Criterion","page":"General","title":"Advection Stability Criterion","text":"","category":"section"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"To avoid spurious oscillations in the advected field between adjacent grid points, the Courant–Friedrichs–Lewy (CFL) criterion must be satisfied:","category":"page"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"beginequation\nDeltat le fractextrmminleft(DeltaxDeltayright)textrmmaxleft(v_xv_yright)\nendequation","category":"page"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"where Deltax and Deltay are the spatial resolutions in the x- and y-directions, and v_x, v_y are the corresponding velocity components.","category":"page"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"This criterion ensures that no particle is advected a greater distance than the minimum grid spacing within one time step.","category":"page"},{"location":"man/AdvectMain/#Examples","page":"General","title":"Examples","text":"","category":"section"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"2-D advection with constant velocity field  \nResolution test of 2-D advection","category":"page"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"See the examples documentation for further details.","category":"page"},{"location":"man/AdvectMain/#Exercises","page":"General","title":"Exercises","text":"","category":"section"},{"location":"man/AdvectMain/","page":"General","title":"General","text":"1-D Gaussian or block anomaly advection  \n2-D coupled advection-diffusion","category":"page"}]
}
